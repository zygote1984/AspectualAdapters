aspect Shapes{

	instance pointcut shapes<Shape> = call(public Shape+.new()) && target(instance); 
	
	
	
	declare adapter: CircleAdapter{ShapeArea, ShapeCircum} adapts shapes<Circle>{
	
		public int getArea()
		{
			return 3*shapes.getR()*shapes.getR();
		}
	
		public int getCircum(){
		
			return 2*3*shapes.getR();
		}
	}

	declare adapter: RectangleAdapter{ShapeArea, ShapeCircum} adapts shapes<Rectangle>{
	
		public String getArea()
		{
			return "Rectangle Area: " + shapes.getA()*shapes.getB();
		}
	
	
		public int getCircum(){
		
			return "Rectangle Circumference: " + 2*(shapes.getA() + shapes.getB());
		}
	}
	
	
	/* IGNORE THE REST */
	declare adapter: ShapeAdapter[ShapeArea, ShapeCircum] adapts shapes {
	
		public int ShapeArea.getArea()
		{
			return "Circle Area: " + shapes[Rectangle].getA()*shapes[Rectangle].getB();
		}
	
	
		public int ShapeCircum.getCircum(){
		
			return "Circle Circumference: "+  2*(shapes[Rectangle].getA() + shapes[Rectangle].getB());
		}

	
	}
	
	instance pointcut <? extends Shape> shapes = call(public Shape+.new()) && this(Shape); 

	declare adapter ShapeAdapter : ShapeArea, ShapeCircum adapts shapes{
		
		public int ShapeArea.getArea()
		{
			return "Rectangle Area: " + shapes.getA()*shapes.getB();
		}

		public int ShapeArea.getArea() : shapes@Circle
		{
			return "Circle Area: " + shapes.getA()*shapes.getB();
		}
	
	
		public int ShapeCircum.getCircum(){
		
			return "Circle Circumference: "+  2*(shapes[Rectangle].getA() + shapes[Rectangle].getB());
		}

	
	}
	
	


}