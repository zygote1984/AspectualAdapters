/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. AJPointcut.jj */
/*@egen*///TODO give correct credits
/*
 * Copyright \u00a9 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  JDK_VERSION = "1.5";
                         
               
                           
                 
}

PARSER_BEGIN(AJPointcutParser)
package org.alia4j.aspectj.parser.ast;


/**
 * Grammar to parse AspectJ pointcuts. Based on the JavaCC grammar for Java 1.5
 * and the AspectJ grammar as published by the abc-group.
 * @author Sreenivasa Viswanadha	- Simplified and enhanced for 1.5
 * @author Stefan Kropp				- Added support for AspectJ
 */
@SuppressWarnings("all")
public class AJPointcutParser/*@bgen(jjtree)*/implements AJPointcutParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTAJPointcutParserState jjtree = new JJTAJPointcutParserState();

/*@egen*/
  void jjtreeOpenNodeScope( Node node )
 {
 }

 void jjtreeCloseNodeScope( Node node )
 {
 }

 public SimpleNode getTreeRoot() {
 	return (SimpleNode) jjtree.rootNode();
 }
}
PARSER_END(AJPointcutParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
 " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >

// "<clinit>()" is due to a bug in
// the ajc. ajc generates an annotation like "staticinitialization(Type.<clinit>())"
// where it should only generate "staticinitialization(Type)"
// also see rule for SimpleNamePattern and the corresponding visit method
// in AJPointcutToExecutionModelVisitor
| < CLINIT: "<clinit>()" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
//| < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()
}

void ReferenceType():
{
	int dimension = 0;
}
{/*@bgen(jjtree) PrimitiveArrayType */
   {
     ASTPrimitiveArrayType jjtn001 = new ASTPrimitiveArrayType(JJTPRIMITIVEARRAYTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( PrimitiveType() ( LOOKAHEAD(2) "[" "]" { dimension++; } )+/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtc001 = false;
                                                                  jjtreeCloseNodeScope(jjtn001);
                                                                }
/*@egen*/ {jjtn001.dimension = dimension;} )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
   }
/*@egen*/                    
  |/*@bgen(jjtree) #ClassOrInterfaceArrayType( dimension > 0) */
    {
      ASTClassOrInterfaceArrayType jjtn002 = new ASTClassOrInterfaceArrayType(JJTCLASSORINTERFACEARRAYTYPE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    (ClassOrInterfaceType() ( LOOKAHEAD(2) "[" "]" { dimension++; })*/*@bgen(jjtree)*/
                                                                      {
                                                                        jjtree.closeNodeScope(jjtn002,  dimension > 0);
                                                                        jjtc002 = false;
                                                                        jjtreeCloseNodeScope(jjtn002);
                                                                      }
/*@egen*/ {jjtn002.dimension = dimension;} )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  dimension > 0);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/                                        
}

void ClassOrInterfaceType()                       :
{/*@bgen(jjtree) ClassOrInterfaceType */
  ASTClassOrInterfaceType jjtn000 = new ASTClassOrInterfaceType(JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassOrInterfaceType */
  try {
/*@egen*//*@bgen(jjtree) Identifier */
  {
    ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtreeCloseNodeScope(jjtn001);
                 }
/*@egen*/ { jjtn001.identifier = token.image; } )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/            
   [ LOOKAHEAD(2) TypeArguments() ]
  ( LOOKAHEAD(2)
    "."/*@bgen(jjtree) Identifier */
    {
      ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( <IDENTIFIER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtreeCloseNodeScope(jjtn002);
                   }
/*@egen*/ { jjtn002.identifier = token.image; } )/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
    }
/*@egen*/            
    [ LOOKAHEAD(2) TypeArguments()]
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void TypeArguments()                   :
{/*@bgen(jjtree) TypeArgumentList */
  ASTTypeArgumentList jjtn000 = new ASTTypeArgumentList(JJTTYPEARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeArgumentList */
   try {
/*@egen*/
   "<" TypeArgument() ( "," TypeArgument() )* ">"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
   }
/*@egen*/
}

void TypeArgument():
{}
{
   ReferenceType()
 |/*@bgen(jjtree) UnknownTypeArgument */
   {
     ASTUnknownTypeArgument jjtn001 = new ASTUnknownTypeArgument(JJTUNKNOWNTYPEARGUMENT);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
   }
   try {
/*@egen*/
   "?"/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
   }
/*@egen*/                     /*@bgen(jjtree) #UnknownBoundedTypeArgument(> 1) */
                            {
                              ASTUnknownBoundedTypeArgument jjtn002 = new ASTUnknownBoundedTypeArgument(JJTUNKNOWNBOUNDEDTYPEARGUMENT);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ [ WildcardBounds() ]/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                jjtreeCloseNodeScope(jjtn002);
                              }
                            }
/*@egen*/                                
}

void WildcardBounds():
{}
{/*@bgen(jjtree) WildcardBoundsExtends */
   {
     ASTWildcardBoundsExtends jjtn001 = new ASTWildcardBoundsExtends(JJTWILDCARDBOUNDSEXTENDS);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( "extends" ReferenceType() )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
   }
/*@egen*/                       
 |/*@bgen(jjtree) WildcardBoundsSuper */
   {
     ASTWildcardBoundsSuper jjtn002 = new ASTWildcardBoundsSuper(JJTWILDCARDBOUNDSSUPER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtreeOpenNodeScope(jjtn002);
   }
   try {
/*@egen*/
   ( "super" ReferenceType() )/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
       jjtreeCloseNodeScope(jjtn002);
     }
   }
/*@egen*/                     
}


void PrimitiveType():
{}
{/*@bgen(jjtree) Boolean */
  {
    ASTBoolean jjtn001 = new ASTBoolean(JJTBOOLEAN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  "boolean"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/         
|/*@bgen(jjtree) Char */
  {
    ASTChar jjtn002 = new ASTChar(JJTCHAR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*/
  "char"/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) Byte */
  {
    ASTByte jjtn003 = new ASTByte(JJTBYTE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*/
  "byte"/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) Short */
  {
    ASTShort jjtn004 = new ASTShort(JJTSHORT);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*/
  "short"/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*/       
|/*@bgen(jjtree) Int */
  {
    ASTInt jjtn005 = new ASTInt(JJTINT);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*/
  "int"/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtreeCloseNodeScope(jjtn005);
    }
  }
/*@egen*/     
|/*@bgen(jjtree) Long */
  {
    ASTLong jjtn006 = new ASTLong(JJTLONG);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
  }
  try {
/*@egen*/
  "long"/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtreeCloseNodeScope(jjtn006);
    }
  }
/*@egen*/      
|/*@bgen(jjtree) Float */
  {
    ASTFloat jjtn007 = new ASTFloat(JJTFLOAT);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    jjtreeOpenNodeScope(jjtn007);
  }
  try {
/*@egen*/
  "float"/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
      jjtreeCloseNodeScope(jjtn007);
    }
  }
/*@egen*/       
|/*@bgen(jjtree) Double */
  {
    ASTDouble jjtn008 = new ASTDouble(JJTDOUBLE);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
    jjtreeOpenNodeScope(jjtn008);
  }
  try {
/*@egen*/
  "double"/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
      jjtreeCloseNodeScope(jjtn008);
    }
  }
/*@egen*/        
}

void ResultType():
{}
{/*@bgen(jjtree) Void */
  {
    ASTVoid jjtn001 = new ASTVoid(JJTVOID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  "void"/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/      
|
  Type()
}

void Name()      :
{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Name */
  try {
/*@egen*//*@bgen(jjtree) #Identifier( true) */
  {
    ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (<IDENTIFIER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtc001 = false;
                  jjtreeCloseNodeScope(jjtn001);
                }
/*@egen*/ {jjtn001.identifier = token.image; } )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*/                  
  (
  "."/*@bgen(jjtree) Identifier */
   {
     ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtreeOpenNodeScope(jjtn002);
   }
   try {
/*@egen*/
   ( <IDENTIFIER>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtreeCloseNodeScope(jjtn002);
                  }
/*@egen*/ {jjtn002.identifier = token.image; } )/*@bgen(jjtree)*/
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
       jjtreeCloseNodeScope(jjtn002);
     }
   }
/*@egen*/            
  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

/********************************************
 * THE ASPECTJ LANGUAGE GRAMMAR STARTS HERE *
 ********************************************/

void PointcutExpression()                    :
{/*@bgen(jjtree) PointcutExpression */
  ASTPointcutExpression jjtn000 = new ASTPointcutExpression(JJTPOINTCUTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PointcutExpression */
        try {
/*@egen*/
	OrPointcutExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void OrPointcutExpression():
{}
{
	AndPointcutExpression()
	("||"/*@bgen(jjtree) #OrPointcutExpression( 2) */
              {
                ASTOrPointcutExpression jjtn001 = new ASTOrPointcutExpression(JJTORPOINTCUTEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
              }
              try {
/*@egen*/ AndPointcutExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
              }
/*@egen*/                         )*

}

void AndPointcutExpression():
{}
{
	UnaryPointcutExpression()
	("&&"/*@bgen(jjtree) #AndPointcutExpression( 2) */
              {
                ASTAndPointcutExpression jjtn001 = new ASTAndPointcutExpression(JJTANDPOINTCUTEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
              }
              try {
/*@egen*/ UnaryPointcutExpression()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
              }
/*@egen*/                          )*
}

void UnaryPointcutExpression()      :
{
	boolean negated = false;
}
{
	( "!" {negated = !negated; })*/*@bgen(jjtree) #NegatedPointcutExpression( negated) */
        {
          ASTNegatedPointcutExpression jjtn001 = new ASTNegatedPointcutExpression(JJTNEGATEDPOINTCUTEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BasicPointcutExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                                    
}

void BasicPointcutExpression() :
{}
{
	(
	 "(" OrPointcutExpression() ")"
	|
	 Call()
	 "("/*@bgen(jjtree) CallPointcut */
             {
               ASTCallPointcut jjtn001 = new ASTCallPointcut(JJTCALLPOINTCUT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ MethodConstructorPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/               ")"
	|
	 Execution()
	 "("/*@bgen(jjtree) ExecutionPointcut */
             {
               ASTExecutionPointcut jjtn002 = new ASTExecutionPointcut(JJTEXECUTIONPOINTCUT);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ MethodConstructorPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 throw (RuntimeException)jjte002;
               }
               if (jjte002 instanceof ParseException) {
                 throw (ParseException)jjte002;
               }
               throw (Error)jjte002;
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/                    ")"
	|
	 Initialization()
	 "("/*@bgen(jjtree) InitializationPointcut */
             {
               ASTInitializationPointcut jjtn003 = new ASTInitializationPointcut(JJTINITIALIZATIONPOINTCUT);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
             }
             try {
/*@egen*/ ConstructorPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 throw (RuntimeException)jjte003;
               }
               if (jjte003 instanceof ParseException) {
                 throw (ParseException)jjte003;
               }
               throw (Error)jjte003;
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
                 jjtreeCloseNodeScope(jjtn003);
               }
             }
/*@egen*/                         ")"
	|
	 Preinitialization()
	 "("/*@bgen(jjtree) PreinitializationPointcut */
             {
               ASTPreinitializationPointcut jjtn004 = new ASTPreinitializationPointcut(JJTPREINITIALIZATIONPOINTCUT);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
               jjtreeOpenNodeScope(jjtn004);
             }
             try {
/*@egen*/ ConstructorPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 throw (RuntimeException)jjte004;
               }
               if (jjte004 instanceof ParseException) {
                 throw (ParseException)jjte004;
               }
               throw (Error)jjte004;
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
                 jjtreeCloseNodeScope(jjtn004);
               }
             }
/*@egen*/                            ")"
	|
	 Staticinitialization()
	 "("/*@bgen(jjtree) StaticinitializationPointcut */
             {
               ASTStaticinitializationPointcut jjtn005 = new ASTStaticinitializationPointcut(JJTSTATICINITIALIZATIONPOINTCUT);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
               jjtreeOpenNodeScope(jjtn005);
             }
             try {
/*@egen*/ ClassnamePatternExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 throw (RuntimeException)jjte005;
               }
               if (jjte005 instanceof ParseException) {
                 throw (ParseException)jjte005;
               }
               throw (Error)jjte005;
             } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtreeCloseNodeScope(jjtn005);
               }
             }
/*@egen*/                               ")"
	|
	 Get()
	 "("/*@bgen(jjtree) GetPointcut */
             {
               ASTGetPointcut jjtn006 = new ASTGetPointcut(JJTGETPOINTCUT);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
               jjtreeOpenNodeScope(jjtn006);
             }
             try {
/*@egen*/ FieldPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 throw (RuntimeException)jjte006;
               }
               if (jjte006 instanceof ParseException) {
                 throw (ParseException)jjte006;
               }
               throw (Error)jjte006;
             } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
                 jjtreeCloseNodeScope(jjtn006);
               }
             }
/*@egen*/              ")"
	|
	 Set()
	 "("/*@bgen(jjtree) SetPointcut */
             {
               ASTSetPointcut jjtn007 = new ASTSetPointcut(JJTSETPOINTCUT);
               boolean jjtc007 = true;
               jjtree.openNodeScope(jjtn007);
               jjtreeOpenNodeScope(jjtn007);
             }
             try {
/*@egen*/ FieldPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte007) {
               if (jjtc007) {
                 jjtree.clearNodeScope(jjtn007);
                 jjtc007 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte007 instanceof RuntimeException) {
                 throw (RuntimeException)jjte007;
               }
               if (jjte007 instanceof ParseException) {
                 throw (ParseException)jjte007;
               }
               throw (Error)jjte007;
             } finally {
               if (jjtc007) {
                 jjtree.closeNodeScope(jjtn007, true);
                 jjtreeCloseNodeScope(jjtn007);
               }
             }
/*@egen*/              ")"
	|
	 Handler()
	 "("/*@bgen(jjtree) HandlerPointcut */
             {
               ASTHandlerPointcut jjtn008 = new ASTHandlerPointcut(JJTHANDLERPOINTCUT);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
               jjtreeOpenNodeScope(jjtn008);
             }
             try {
/*@egen*/ ClassnamePatternExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte008) {
               if (jjtc008) {
                 jjtree.clearNodeScope(jjtn008);
                 jjtc008 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte008 instanceof RuntimeException) {
                 throw (RuntimeException)jjte008;
               }
               if (jjte008 instanceof ParseException) {
                 throw (ParseException)jjte008;
               }
               throw (Error)jjte008;
             } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtreeCloseNodeScope(jjtn008);
               }
             }
/*@egen*/                  ")"
	|
	 Adviceexecution()
	 "(" "*" "*"/*@bgen(jjtree) #AdviceExecutionPointcut( 0) */
                     {
                       ASTAdviceExecutionPointcut jjtn009 = new ASTAdviceExecutionPointcut(JJTADVICEEXECUTIONPOINTCUT);
                       boolean jjtc009 = true;
                       jjtree.openNodeScope(jjtn009);
                       jjtreeOpenNodeScope(jjtn009);
                     }
                     try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                     } finally {
                       if (jjtc009) {
                         jjtree.closeNodeScope(jjtn009,  0);
                         jjtreeCloseNodeScope(jjtn009);
                       }
                     }
/*@egen*/                            
	|
	 Within()
	 "("/*@bgen(jjtree) WithinPointcut */
             {
               ASTWithinPointcut jjtn010 = new ASTWithinPointcut(JJTWITHINPOINTCUT);
               boolean jjtc010 = true;
               jjtree.openNodeScope(jjtn010);
               jjtreeOpenNodeScope(jjtn010);
             }
             try {
/*@egen*/ ClassnamePatternExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte010) {
               if (jjtc010) {
                 jjtree.clearNodeScope(jjtn010);
                 jjtc010 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte010 instanceof RuntimeException) {
                 throw (RuntimeException)jjte010;
               }
               if (jjte010 instanceof ParseException) {
                 throw (ParseException)jjte010;
               }
               throw (Error)jjte010;
             } finally {
               if (jjtc010) {
                 jjtree.closeNodeScope(jjtn010, true);
                 jjtreeCloseNodeScope(jjtn010);
               }
             }
/*@egen*/                 ")"
	|
	 Withincode()
	 "("/*@bgen(jjtree) WithincodePointcut */
             {
               ASTWithincodePointcut jjtn011 = new ASTWithincodePointcut(JJTWITHINCODEPOINTCUT);
               boolean jjtc011 = true;
               jjtree.openNodeScope(jjtn011);
               jjtreeOpenNodeScope(jjtn011);
             }
             try {
/*@egen*/ MethodConstructorPattern()/*@bgen(jjtree)*/
             } catch (Throwable jjte011) {
               if (jjtc011) {
                 jjtree.clearNodeScope(jjtn011);
                 jjtc011 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte011 instanceof RuntimeException) {
                 throw (RuntimeException)jjte011;
               }
               if (jjte011 instanceof ParseException) {
                 throw (ParseException)jjte011;
               }
               throw (Error)jjte011;
             } finally {
               if (jjtc011) {
                 jjtree.closeNodeScope(jjtn011, true);
                 jjtreeCloseNodeScope(jjtn011);
               }
             }
/*@egen*/                     ")"
	|
	 Cflow()
	 "("/*@bgen(jjtree) CflowPointcut */
             {
               ASTCflowPointcut jjtn012 = new ASTCflowPointcut(JJTCFLOWPOINTCUT);
               boolean jjtc012 = true;
               jjtree.openNodeScope(jjtn012);
               jjtreeOpenNodeScope(jjtn012);
             }
             try {
/*@egen*/ PointcutExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte012) {
               if (jjtc012) {
                 jjtree.clearNodeScope(jjtn012);
                 jjtc012 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte012 instanceof RuntimeException) {
                 throw (RuntimeException)jjte012;
               }
               if (jjte012 instanceof ParseException) {
                 throw (ParseException)jjte012;
               }
               throw (Error)jjte012;
             } finally {
               if (jjtc012) {
                 jjtree.closeNodeScope(jjtn012, true);
                 jjtreeCloseNodeScope(jjtn012);
               }
             }
/*@egen*/                ")"
	|
	 Cflowbelow()
	 "("/*@bgen(jjtree) CflowbelowPointcut */
             {
               ASTCflowbelowPointcut jjtn013 = new ASTCflowbelowPointcut(JJTCFLOWBELOWPOINTCUT);
               boolean jjtc013 = true;
               jjtree.openNodeScope(jjtn013);
               jjtreeOpenNodeScope(jjtn013);
             }
             try {
/*@egen*/ PointcutExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte013) {
               if (jjtc013) {
                 jjtree.clearNodeScope(jjtn013);
                 jjtc013 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte013 instanceof RuntimeException) {
                 throw (RuntimeException)jjte013;
               }
               if (jjte013 instanceof ParseException) {
                 throw (ParseException)jjte013;
               }
               throw (Error)jjte013;
             } finally {
               if (jjtc013) {
                 jjtree.closeNodeScope(jjtn013, true);
                 jjtreeCloseNodeScope(jjtn013);
               }
             }
/*@egen*/                     ")"
	|
	 "if"
	 "("/*@bgen(jjtree) IfPointcut */
             {
               ASTIfPointcut jjtn014 = new ASTIfPointcut(JJTIFPOINTCUT);
               boolean jjtc014 = true;
               jjtree.openNodeScope(jjtn014);
               jjtreeOpenNodeScope(jjtn014);
             }
             try {
/*@egen*/ MethodCall()/*@bgen(jjtree)*/
             } catch (Throwable jjte014) {
               if (jjtc014) {
                 jjtree.clearNodeScope(jjtn014);
                 jjtc014 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte014 instanceof RuntimeException) {
                 throw (RuntimeException)jjte014;
               }
               if (jjte014 instanceof ParseException) {
                 throw (ParseException)jjte014;
               }
               throw (Error)jjte014;
             } finally {
               if (jjtc014) {
                 jjtree.closeNodeScope(jjtn014, true);
                 jjtreeCloseNodeScope(jjtn014);
               }
             }
/*@egen*/             ")"
	|
	 "this"
	 "("/*@bgen(jjtree) ThisPointcut */
             {
               ASTThisPointcut jjtn015 = new ASTThisPointcut(JJTTHISPOINTCUT);
               boolean jjtc015 = true;
               jjtree.openNodeScope(jjtn015);
               jjtreeOpenNodeScope(jjtn015);
             }
             try {
/*@egen*/ TypeIdStar()/*@bgen(jjtree)*/
             } catch (Throwable jjte015) {
               if (jjtc015) {
                 jjtree.clearNodeScope(jjtn015);
                 jjtc015 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte015 instanceof RuntimeException) {
                 throw (RuntimeException)jjte015;
               }
               if (jjte015 instanceof ParseException) {
                 throw (ParseException)jjte015;
               }
               throw (Error)jjte015;
             } finally {
               if (jjtc015) {
                 jjtree.closeNodeScope(jjtn015, true);
                 jjtreeCloseNodeScope(jjtn015);
               }
             }
/*@egen*/               ")"
	|
	 Target()
	 "("/*@bgen(jjtree) TargetPointcut */
             {
               ASTTargetPointcut jjtn016 = new ASTTargetPointcut(JJTTARGETPOINTCUT);
               boolean jjtc016 = true;
               jjtree.openNodeScope(jjtn016);
               jjtreeOpenNodeScope(jjtn016);
             }
             try {
/*@egen*/ TypeIdStar()/*@bgen(jjtree)*/
             } catch (Throwable jjte016) {
               if (jjtc016) {
                 jjtree.clearNodeScope(jjtn016);
                 jjtc016 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte016 instanceof RuntimeException) {
                 throw (RuntimeException)jjte016;
               }
               if (jjte016 instanceof ParseException) {
                 throw (ParseException)jjte016;
               }
               throw (Error)jjte016;
             } finally {
               if (jjtc016) {
                 jjtree.closeNodeScope(jjtn016, true);
                 jjtreeCloseNodeScope(jjtn016);
               }
             }
/*@egen*/                 ")"
	|
	 Args()
	 "("/*@bgen(jjtree) ArgsPointcut */
             {
               ASTArgsPointcut jjtn017 = new ASTArgsPointcut(JJTARGSPOINTCUT);
               boolean jjtc017 = true;
               jjtree.openNodeScope(jjtn017);
               jjtreeOpenNodeScope(jjtn017);
             }
             try {
/*@egen*/ TypeIdStarListOpt()/*@bgen(jjtree)*/
             } catch (Throwable jjte017) {
               if (jjtc017) {
                 jjtree.clearNodeScope(jjtn017);
                 jjtc017 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte017 instanceof RuntimeException) {
                 throw (RuntimeException)jjte017;
               }
               if (jjte017 instanceof ParseException) {
                 throw (ParseException)jjte017;
               }
               throw (Error)jjte017;
             } finally {
               if (jjtc017) {
                 jjtree.closeNodeScope(jjtn017, true);
                 jjtreeCloseNodeScope(jjtn017);
               }
             }
/*@egen*/               ")"
	|
	 Returning()
	 "("/*@bgen(jjtree) ReturningPointcut */
             {
               ASTReturningPointcut jjtn018 = new ASTReturningPointcut(JJTRETURNINGPOINTCUT);
               boolean jjtc018 = true;
               jjtree.openNodeScope(jjtn018);
               jjtreeOpenNodeScope(jjtn018);
             }
             try {
/*@egen*/ TypeIdStar()/*@bgen(jjtree)*/
             } catch (Throwable jjte018) {
               if (jjtc018) {
                 jjtree.clearNodeScope(jjtn018);
                 jjtc018 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte018 instanceof RuntimeException) {
                 throw (RuntimeException)jjte018;
               }
               if (jjte018 instanceof ParseException) {
                 throw (ParseException)jjte018;
               }
               throw (Error)jjte018;
             } finally {
               if (jjtc018) {
                 jjtree.closeNodeScope(jjtn018, true);
                 jjtreeCloseNodeScope(jjtn018);
               }
             }
/*@egen*/                    ")"
	|
	 Name()
	 "("/*@bgen(jjtree) NamedPointcut */
             {
               ASTNamedPointcut jjtn019 = new ASTNamedPointcut(JJTNAMEDPOINTCUT);
               boolean jjtc019 = true;
               jjtree.openNodeScope(jjtn019);
               jjtreeOpenNodeScope(jjtn019);
             }
             try {
/*@egen*/ TypeIdStarListOpt()/*@bgen(jjtree)*/
             } catch (Throwable jjte019) {
               if (jjtc019) {
                 jjtree.clearNodeScope(jjtn019);
                 jjtc019 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte019 instanceof RuntimeException) {
                 throw (RuntimeException)jjte019;
               }
               if (jjte019 instanceof ParseException) {
                 throw (ParseException)jjte019;
               }
               throw (Error)jjte019;
             } finally {
               if (jjtc019) {
                 jjtree.closeNodeScope(jjtn019, true);
                 jjtreeCloseNodeScope(jjtn019);
               }
             }
/*@egen*/                ")"
	)
}

void MethodCall()             :
{/*@bgen(jjtree) MethodCall */
  ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodCall */
  try {
/*@egen*/
  Name() "(" IdListOpt() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void IdListOpt()        :
{/*@bgen(jjtree) IdList */
  ASTIdList jjtn000 = new ASTIdList(JJTIDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdList */
  try {
/*@egen*/
  [
    (/*@bgen(jjtree) #Identifier( true) */
      {
        ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      }
      try {
/*@egen*/
      (<IDENTIFIER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                    }
/*@egen*/ {jjtn001.identifier = token.image; } )/*@bgen(jjtree)*/
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
/*@egen*/                  
    )
    (
      ","/*@bgen(jjtree) #Identifier( true) */
          {
            ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/ (<IDENTIFIER>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                          jjtreeCloseNodeScope(jjtn002);
                        }
/*@egen*/ {jjtn002.identifier = token.image; } )/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/                  
    )*
  ]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

// void MethodSignature() #MethodSignature:
// {}
// {
// ResultType()
// 	Name()
// 	"("
// 	[ Name()
// 	  ( "," Name() )*
// 	]
// 	")"
// }

void NamePattern()              :
{/*@bgen(jjtree) NamePattern */
  ASTNamePattern jjtn000 = new ASTNamePattern(JJTNAMEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NamePattern */
         try {
/*@egen*/
	 SimpleNamePattern()

     (LOOKAHEAD (2) ("."|/*@bgen(jjtree) PackageRest */
                         {
                           ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/".."/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/              )
      SimpleNamePattern()
      )*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void SimpleNamePattern()                    :
{/*@bgen(jjtree) SimpleNamePattern */
  ASTSimpleNamePattern jjtn000 = new ASTSimpleNamePattern(JJTSIMPLENAMEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleNamePattern */
        try {
/*@egen*//*@bgen(jjtree) ClinitIdentifier */
        {
          ASTClinitIdentifier jjtn001 = new ASTClinitIdentifier(JJTCLINITIDENTIFIER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	( <CLINIT> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                  
	|
	(
		(/*@bgen(jjtree) NameWildcard */
                 {
                   ASTNameWildcard jjtn002 = new ASTNameWildcard(JJTNAMEWILDCARD);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtreeOpenNodeScope(jjtn002);
                 }
                 try {
/*@egen*/
		 <STAR>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtreeCloseNodeScope(jjtn002);
                   }
                 }
/*@egen*/              
		|/*@bgen(jjtree) Identifier */
                 {
                   ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtreeOpenNodeScope(jjtn003);
                 }
                 try {
/*@egen*/
		 ( <IDENTIFIER>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                  jjtreeCloseNodeScope(jjtn003);
                                }
/*@egen*/ {jjtn003.identifier = token.image; } )/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtreeCloseNodeScope(jjtn003);
                   }
                 }
/*@egen*/            
		)

		( LOOKAHEAD({getToken(1).specialToken == null && (getToken(1).kind == STAR || getToken(1).kind == IDENTIFIER)})
		 (/*@bgen(jjtree) NameWildcard */
                 {
                   ASTNameWildcard jjtn004 = new ASTNameWildcard(JJTNAMEWILDCARD);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtreeOpenNodeScope(jjtn004);
                 }
                 try {
/*@egen*/
		 <STAR>/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtreeCloseNodeScope(jjtn004);
                   }
                 }
/*@egen*/              
		|/*@bgen(jjtree) Identifier */
                 {
                   ASTIdentifier jjtn005 = new ASTIdentifier(JJTIDENTIFIER);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                   jjtreeOpenNodeScope(jjtn005);
                 }
                 try {
/*@egen*/
		 ( <IDENTIFIER>/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn005, true);
                                   jjtc005 = false;
                                   jjtreeCloseNodeScope(jjtn005);
                                 }
/*@egen*/  {jjtn005.identifier = token.image; } )/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtreeCloseNodeScope(jjtn005);
                   }
                 }
/*@egen*/            
		 // TODO: does not allow identifier patterns like "x*1.*" because "1." is tokenized as floating point literal
		 )
		)*
	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ClasstypeDotId()                 :
{/*@bgen(jjtree) ClasstypeDotId */
  ASTClasstypeDotId jjtn000 = new ASTClasstypeDotId(JJTCLASSTYPEDOTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClasstypeDotId */
        try {
/*@egen*/
	(
	 NamePattern()
	 [/*@bgen(jjtree) SubTypeOperator */
           {
             ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
           }
           try {
/*@egen*/ "+"/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtreeCloseNodeScope(jjtn001);
             }
           }
/*@egen*/                   "." SimpleNamePattern() ]
	)
	|
	 "(" TypePatternExpression() ")" "." SimpleNamePattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/

}

void ClasstypeDotNew()                  :
{/*@bgen(jjtree) ClasstypeDotNew */
  ASTClasstypeDotNew jjtn000 = new ASTClasstypeDotNew(JJTCLASSTYPEDOTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClasstypeDotNew */
         try {
/*@egen*//*@bgen(jjtree) New */
         {
           ASTNew jjtn001 = new ASTNew(JJTNEW);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 "new"/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/     
	|
	 NamePattern()
	 (/*@bgen(jjtree) SubTypeOperator */
          {
            ASTSubTypeOperator jjtn002 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/"+"/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/                  "." |/*@bgen(jjtree) PackageRest */
                                     {
                                       ASTPackageRest jjtn003 = new ASTPackageRest(JJTPACKAGEREST);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                       jjtreeOpenNodeScope(jjtn003);
                                     }
                                     try {
/*@egen*/ ".."/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003, true);
                                         jjtreeCloseNodeScope(jjtn003);
                                       }
                                     }
/*@egen*/              | ".")/*@bgen(jjtree) New */
                                                              {
                                                                ASTNew jjtn004 = new ASTNew(JJTNEW);
                                                                boolean jjtc004 = true;
                                                                jjtree.openNodeScope(jjtn004);
                                                                jjtreeOpenNodeScope(jjtn004);
                                                              }
                                                              try {
/*@egen*/ "new"/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc004) {
                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                  jjtreeCloseNodeScope(jjtn004);
                                                                }
                                                              }
/*@egen*/     
	|
	 "(" TypePatternExpression() ")" "."/*@bgen(jjtree) New */
                                             {
                                               ASTNew jjtn005 = new ASTNew(JJTNEW);
                                               boolean jjtc005 = true;
                                               jjtree.openNodeScope(jjtn005);
                                               jjtreeOpenNodeScope(jjtn005);
                                             }
                                             try {
/*@egen*/ "new"/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc005) {
                                                 jjtree.closeNodeScope(jjtn005, true);
                                                 jjtreeCloseNodeScope(jjtn005);
                                               }
                                             }
/*@egen*/     /*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void TypePatternExpression():
{}
{
	OrTypePatternExpression()
	("&&"/*@bgen(jjtree) #AndTypePatternExpression( 2) */
                {
                  ASTAndTypePatternExpression jjtn001 = new ASTAndTypePatternExpression(JJTANDTYPEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		OrTypePatternExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                            
	)*

}

void OrTypePatternExpression():
{}
{
	UnaryTypePatternExpression()
	("||"/*@bgen(jjtree) #OrTypePatternExpression( 2) */
                 {
                   ASTOrTypePatternExpression jjtn001 = new ASTOrTypePatternExpression(JJTORTYPEPATTERNEXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
                 }
                 try {
/*@egen*/
		 UnaryTypePatternExpression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     throw (RuntimeException)jjte001;
                   }
                   if (jjte001 instanceof ParseException) {
                     throw (ParseException)jjte001;
                   }
                   throw (Error)jjte001;
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtreeCloseNodeScope(jjtn001);
                   }
                 }
/*@egen*/
		                            
	)*
}

void UnaryTypePatternExpression():
{
	boolean negated = false;
}
{
	( "!" { negated = !negated; } )*/*@bgen(jjtree) #NegatedTypePatternExpression( negated) */
        {
          ASTNegatedTypePatternExpression jjtn001 = new ASTNegatedTypePatternExpression(JJTNEGATEDTYPEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BasicTypePattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                                       
}

void BasicTypePattern()                  :
{/*@bgen(jjtree) BasicTypePattern */
        ASTBasicTypePattern jjtn000 = new ASTBasicTypePattern(JJTBASICTYPEPATTERN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);
/*@egen*/
	int arrayDimension = 0;
}
{/*@bgen(jjtree) BasicTypePattern */
         try {
/*@egen*//*@bgen(jjtree) Void */
         {
           ASTVoid jjtn001 = new ASTVoid(JJTVOID);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 "void"/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/      
	|/*@bgen(jjtree) #ArrayTypePatternExpression( arrayDimension > 0) */
         {
           ASTArrayTypePatternExpression jjtn002 = new ASTArrayTypePatternExpression(JJTARRAYTYPEPATTERNEXPRESSION);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
         }
         try {
/*@egen*/
	 ( BaseTypePattern() ( "[" "]" { arrayDimension++; } )*/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn002,  arrayDimension > 0);
                                                                  jjtc002 = false;
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                }
/*@egen*/ { jjtn002.arrayDimension=arrayDimension; } )/*@bgen(jjtree)*/
         } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             throw (RuntimeException)jjte002;
           }
           if (jjte002 instanceof ParseException) {
             throw (ParseException)jjte002;
           }
           throw (Error)jjte002;
         } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  arrayDimension > 0);
             jjtreeCloseNodeScope(jjtn002);
           }
         }
/*@egen*/                                                
	|
	 "(" TypePatternExpression() ")"/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void BaseTypePattern()                 :
{/*@bgen(jjtree) BaseTypePattern */
  ASTBaseTypePattern jjtn000 = new ASTBaseTypePattern(JJTBASETYPEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BaseTypePattern */
         try {
/*@egen*/
	 PrimitiveType()
	|
	 NamePattern() [/*@bgen(jjtree) SubTypeOperator */
                         {
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ "+"/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/                  ]/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void ClassnamePatternExpression():
{}
{
	AndClassnamePatternExpression()
	(	"||"/*@bgen(jjtree) #OrClassnamePatternExpression( 2) */
                {
                  ASTOrClassnamePatternExpression jjtn001 = new ASTOrClassnamePatternExpression(JJTORCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		AndClassnamePatternExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                                
	)*
}

void AndClassnamePatternExpression():
{}
{
	UnaryClassnamePatternExpression()
	(	"&&"/*@bgen(jjtree) #AndClassnamePatternExpression( 2) */
                {
                  ASTAndClassnamePatternExpression jjtn001 = new ASTAndClassnamePatternExpression(JJTANDCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		UnaryClassnamePatternExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                                 
	)*
}

void UnaryClassnamePatternExpression():
{
	boolean negated = false;
}
{
	( "!" { negated = !negated;} )*/*@bgen(jjtree) #NegatedClassnamePatternExpression( negated) */
        {
          ASTNegatedClassnamePatternExpression jjtn001 = new ASTNegatedClassnamePatternExpression(JJTNEGATEDCLASSNAMEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BasicClassnamePattern()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                                            
}

void BasicClassnamePattern():
{
}
{
	 NamePattern()/*@bgen(jjtree) BasicClassnamePattern */
                       {
                         ASTBasicClassnamePattern jjtn002 = new ASTBasicClassnamePattern(JJTBASICCLASSNAMEPATTERN);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ [/*@bgen(jjtree) SubTypeOperator */
                         {
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ "+"/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/                  ]/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtreeCloseNodeScope(jjtn002);
                         }
                       }
/*@egen*/                       
	|
	 "(" ClassnamePatternExpression() ")"
}

// "Within"- patterns with alternative operators (|| -> OR, && -> AND) needed for
// parsing, "include" and "exclude" attributes in aop.xml
void ClassnamePatternExpressionAlternativeOperators():
{}
{
	AndClassnamePatternExpressionAlternativeOperators()
	(	OR()/*@bgen(jjtree) #OrClassnamePatternExpression( 2) */
                {
                  ASTOrClassnamePatternExpression jjtn001 = new ASTOrClassnamePatternExpression(JJTORCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		AndClassnamePatternExpressionAlternativeOperators()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                                
	)*
}

void AndClassnamePatternExpressionAlternativeOperators():
{}
{
	UnaryClassnamePatternExpressionAlternativeOperators()
	(	AND()/*@bgen(jjtree) #AndClassnamePatternExpression( 2) */
                {
                  ASTAndClassnamePatternExpression jjtn001 = new ASTAndClassnamePatternExpression(JJTANDCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		UnaryClassnamePatternExpressionAlternativeOperators()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                                 
	)*
}

void UnaryClassnamePatternExpressionAlternativeOperators():
{
	boolean negated = false;
}
{
	( "!" { negated = !negated;} )*/*@bgen(jjtree) #NegatedClassnamePatternExpression( negated) */
        {
          ASTNegatedClassnamePatternExpression jjtn001 = new ASTNegatedClassnamePatternExpression(JJTNEGATEDCLASSNAMEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BasicClassnamePatternAlternativeOperators()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
/*@egen*/                                            
}

void BasicClassnamePatternAlternativeOperators():
{
}
{
	 NamePattern()/*@bgen(jjtree) #BasicClassnamePattern(> 1) */
                       {
                         ASTBasicClassnamePattern jjtn002 = new ASTBasicClassnamePattern(JJTBASICCLASSNAMEPATTERN);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
                       }
                       try {
/*@egen*/ [/*@bgen(jjtree) SubTypeOperator */
                         {
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
                         }
                         try {
/*@egen*/ "+"/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
                         }
/*@egen*/                  ]/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                           jjtreeCloseNodeScope(jjtn002);
                         }
                       }
/*@egen*/                           
	|
	 "(" ClassnamePatternExpressionAlternativeOperators() ")"
}
// end of alternative operators

void ClassnamePatternExpressionNobang():
{}
{
	AndClassnamePatternExpressionNobang()
	(	"||"/*@bgen(jjtree) #OrClassnamePatternExpressionNobang( 2) */
                {
                  ASTOrClassnamePatternExpressionNobang jjtn001 = new ASTOrClassnamePatternExpressionNobang(JJTORCLASSNAMEPATTERNEXPRESSIONNOBANG);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
		AndClassnamePatternExpressionNobang()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
		                                      
	)*

}

void AndClassnamePatternExpressionNobang():
{}
{
	 BasicClassnamePattern()
	 (	"&&"/*@bgen(jjtree) #AndClassnamePatternExpressionNobang( 2) */
                {
                  ASTAndClassnamePatternExpressionNobang jjtn001 = new ASTAndClassnamePatternExpressionNobang(JJTANDCLASSNAMEPATTERNEXPRESSIONNOBANG);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
                }
                try {
/*@egen*/
	 	UnaryClassnamePatternExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
                }
/*@egen*/
	 	                                       
	 )*
}

void MethodConstructorPattern():
{}
{
	(LOOKAHEAD(ModifierPatternExpression() ClasstypeDotNew())
		ConstructorPattern()
	|
		MethodPattern()
	)

}

void MethodPattern()               :
{/*@bgen(jjtree) MethodPattern */
  ASTMethodPattern jjtn000 = new ASTMethodPattern(JJTMETHODPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodPattern */
        try {
/*@egen*/
	ModifierPatternExpression()
	TypePatternExpression()
	ClasstypeDotId()
	"(" FormalPatternListOpt() ")"
	ThrowsPatternListOpt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ConstructorPattern()                    :
{/*@bgen(jjtree) ConstructorPattern */
  ASTConstructorPattern jjtn000 = new ASTConstructorPattern(JJTCONSTRUCTORPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstructorPattern */
        try {
/*@egen*/
	ModifierPatternExpression()
	ClasstypeDotNew()
	"(" FormalPatternListOpt() ")"
	ThrowsPatternListOpt()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void FieldPattern()              :
{/*@bgen(jjtree) FieldPattern */
  ASTFieldPattern jjtn000 = new ASTFieldPattern(JJTFIELDPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldPattern */
        try {
/*@egen*/
	ModifierPatternExpression()
	TypePatternExpression()
	ClasstypeDotId()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ModifierPatternExpression()                  :
{/*@bgen(jjtree) ModifiersPattern */
  ASTModifiersPattern jjtn000 = new ASTModifiersPattern(JJTMODIFIERSPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ModifiersPattern */
        try {
/*@egen*/
	(
		LOOKAHEAD(2)
		("!"
			(/*@bgen(jjtree) #NotPublic(true) */
                          {
                            ASTNotPublic jjtn001 = new ASTNotPublic(JJTNOTPUBLIC);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
                          }
                          try {
/*@egen*/
			  "public"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
                          }
/*@egen*/             
			 |/*@bgen(jjtree) #NotStatic(true) */
                          {
                            ASTNotStatic jjtn002 = new ASTNotStatic(JJTNOTSTATIC);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                            jjtreeOpenNodeScope(jjtn002);
                          }
                          try {
/*@egen*/
			  "static"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtreeCloseNodeScope(jjtn002);
                            }
                          }
/*@egen*/             
			 |/*@bgen(jjtree) #NotProtected(true) */
                          {
                            ASTNotProtected jjtn003 = new ASTNotProtected(JJTNOTPROTECTED);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
                            jjtreeOpenNodeScope(jjtn003);
                          }
                          try {
/*@egen*/
			  "protected"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                              jjtreeCloseNodeScope(jjtn003);
                            }
                          }
/*@egen*/                
			 |/*@bgen(jjtree) #NotPrivate(true) */
                          {
                            ASTNotPrivate jjtn004 = new ASTNotPrivate(JJTNOTPRIVATE);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                            jjtreeOpenNodeScope(jjtn004);
                          }
                          try {
/*@egen*/
			  "private"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                              jjtreeCloseNodeScope(jjtn004);
                            }
                          }
/*@egen*/              
			 |/*@bgen(jjtree) #NotFinal(true) */
                          {
                            ASTNotFinal jjtn005 = new ASTNotFinal(JJTNOTFINAL);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                            jjtreeOpenNodeScope(jjtn005);
                          }
                          try {
/*@egen*/
			  "final"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                              jjtreeCloseNodeScope(jjtn005);
                            }
                          }
/*@egen*/            
			 |/*@bgen(jjtree) #NotAbstract(true) */
                          {
                            ASTNotAbstract jjtn006 = new ASTNotAbstract(JJTNOTABSTRACT);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
                            jjtreeOpenNodeScope(jjtn006);
                          }
                          try {
/*@egen*/
			  "abstract"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                              jjtreeCloseNodeScope(jjtn006);
                            }
                          }
/*@egen*/               
			 |/*@bgen(jjtree) #NotSynchronized(true) */
                          {
                            ASTNotSynchronized jjtn007 = new ASTNotSynchronized(JJTNOTSYNCHRONIZED);
                            boolean jjtc007 = true;
                            jjtree.openNodeScope(jjtn007);
                            jjtreeOpenNodeScope(jjtn007);
                          }
                          try {
/*@egen*/
			  "synchronized"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc007) {
                              jjtree.closeNodeScope(jjtn007, true);
                              jjtreeCloseNodeScope(jjtn007);
                            }
                          }
/*@egen*/                   
			 |/*@bgen(jjtree) #NotNative(true) */
                          {
                            ASTNotNative jjtn008 = new ASTNotNative(JJTNOTNATIVE);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
                            jjtreeOpenNodeScope(jjtn008);
                          }
                          try {
/*@egen*/
			  "native"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                              jjtreeCloseNodeScope(jjtn008);
                            }
                          }
/*@egen*/             
			 |/*@bgen(jjtree) #NotTransient(true) */
                          {
                            ASTNotTransient jjtn009 = new ASTNotTransient(JJTNOTTRANSIENT);
                            boolean jjtc009 = true;
                            jjtree.openNodeScope(jjtn009);
                            jjtreeOpenNodeScope(jjtn009);
                          }
                          try {
/*@egen*/
			  "transient"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc009) {
                              jjtree.closeNodeScope(jjtn009, true);
                              jjtreeCloseNodeScope(jjtn009);
                            }
                          }
/*@egen*/                
			 |/*@bgen(jjtree) #NotVolatile(true) */
                          {
                            ASTNotVolatile jjtn010 = new ASTNotVolatile(JJTNOTVOLATILE);
                            boolean jjtc010 = true;
                            jjtree.openNodeScope(jjtn010);
                            jjtreeOpenNodeScope(jjtn010);
                          }
                          try {
/*@egen*/
			  "volatile"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc010) {
                              jjtree.closeNodeScope(jjtn010, true);
                              jjtreeCloseNodeScope(jjtn010);
                            }
                          }
/*@egen*/               
			 |/*@bgen(jjtree) #NotStrictfp(true) */
                          {
                            ASTNotStrictfp jjtn011 = new ASTNotStrictfp(JJTNOTSTRICTFP);
                            boolean jjtc011 = true;
                            jjtree.openNodeScope(jjtn011);
                            jjtreeOpenNodeScope(jjtn011);
                          }
                          try {
/*@egen*/
			  "strictfp"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc011) {
                              jjtree.closeNodeScope(jjtn011, true);
                              jjtreeCloseNodeScope(jjtn011);
                            }
                          }
/*@egen*/               
			)
		|
			(/*@bgen(jjtree) #Public(true) */
                          {
                            ASTPublic jjtn012 = new ASTPublic(JJTPUBLIC);
                            boolean jjtc012 = true;
                            jjtree.openNodeScope(jjtn012);
                            jjtreeOpenNodeScope(jjtn012);
                          }
                          try {
/*@egen*/
			  "public"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc012) {
                              jjtree.closeNodeScope(jjtn012, true);
                              jjtreeCloseNodeScope(jjtn012);
                            }
                          }
/*@egen*/          
			 |/*@bgen(jjtree) #Static(true) */
                          {
                            ASTStatic jjtn013 = new ASTStatic(JJTSTATIC);
                            boolean jjtc013 = true;
                            jjtree.openNodeScope(jjtn013);
                            jjtreeOpenNodeScope(jjtn013);
                          }
                          try {
/*@egen*/
			  "static"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc013) {
                              jjtree.closeNodeScope(jjtn013, true);
                              jjtreeCloseNodeScope(jjtn013);
                            }
                          }
/*@egen*/          
			 |/*@bgen(jjtree) #Protected(true) */
                          {
                            ASTProtected jjtn014 = new ASTProtected(JJTPROTECTED);
                            boolean jjtc014 = true;
                            jjtree.openNodeScope(jjtn014);
                            jjtreeOpenNodeScope(jjtn014);
                          }
                          try {
/*@egen*/
			  "protected"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc014) {
                              jjtree.closeNodeScope(jjtn014, true);
                              jjtreeCloseNodeScope(jjtn014);
                            }
                          }
/*@egen*/             
			 |/*@bgen(jjtree) #Private(true) */
                          {
                            ASTPrivate jjtn015 = new ASTPrivate(JJTPRIVATE);
                            boolean jjtc015 = true;
                            jjtree.openNodeScope(jjtn015);
                            jjtreeOpenNodeScope(jjtn015);
                          }
                          try {
/*@egen*/
			  "private"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc015) {
                              jjtree.closeNodeScope(jjtn015, true);
                              jjtreeCloseNodeScope(jjtn015);
                            }
                          }
/*@egen*/           
			 |/*@bgen(jjtree) #Final(true) */
                          {
                            ASTFinal jjtn016 = new ASTFinal(JJTFINAL);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
                            jjtreeOpenNodeScope(jjtn016);
                          }
                          try {
/*@egen*/
			  "final"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016, true);
                              jjtreeCloseNodeScope(jjtn016);
                            }
                          }
/*@egen*/         
			 |/*@bgen(jjtree) #Abstract(true) */
                          {
                            ASTAbstract jjtn017 = new ASTAbstract(JJTABSTRACT);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
                            jjtreeOpenNodeScope(jjtn017);
                          }
                          try {
/*@egen*/
			  "abstract"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                              jjtreeCloseNodeScope(jjtn017);
                            }
                          }
/*@egen*/            
			 |/*@bgen(jjtree) #Synchronized(true) */
                          {
                            ASTSynchronized jjtn018 = new ASTSynchronized(JJTSYNCHRONIZED);
                            boolean jjtc018 = true;
                            jjtree.openNodeScope(jjtn018);
                            jjtreeOpenNodeScope(jjtn018);
                          }
                          try {
/*@egen*/
			  "synchronized"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc018) {
                              jjtree.closeNodeScope(jjtn018, true);
                              jjtreeCloseNodeScope(jjtn018);
                            }
                          }
/*@egen*/                
			 |/*@bgen(jjtree) #Native(true) */
                          {
                            ASTNative jjtn019 = new ASTNative(JJTNATIVE);
                            boolean jjtc019 = true;
                            jjtree.openNodeScope(jjtn019);
                            jjtreeOpenNodeScope(jjtn019);
                          }
                          try {
/*@egen*/
			  "native"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc019) {
                              jjtree.closeNodeScope(jjtn019, true);
                              jjtreeCloseNodeScope(jjtn019);
                            }
                          }
/*@egen*/          
			 |/*@bgen(jjtree) #Transient(true) */
                          {
                            ASTTransient jjtn020 = new ASTTransient(JJTTRANSIENT);
                            boolean jjtc020 = true;
                            jjtree.openNodeScope(jjtn020);
                            jjtreeOpenNodeScope(jjtn020);
                          }
                          try {
/*@egen*/
			  "transient"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc020) {
                              jjtree.closeNodeScope(jjtn020, true);
                              jjtreeCloseNodeScope(jjtn020);
                            }
                          }
/*@egen*/             
			 |/*@bgen(jjtree) #Volatile(true) */
                          {
                            ASTVolatile jjtn021 = new ASTVolatile(JJTVOLATILE);
                            boolean jjtc021 = true;
                            jjtree.openNodeScope(jjtn021);
                            jjtreeOpenNodeScope(jjtn021);
                          }
                          try {
/*@egen*/
			  "volatile"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc021) {
                              jjtree.closeNodeScope(jjtn021, true);
                              jjtreeCloseNodeScope(jjtn021);
                            }
                          }
/*@egen*/            
			 |/*@bgen(jjtree) #Strictfp(true) */
                          {
                            ASTStrictfp jjtn022 = new ASTStrictfp(JJTSTRICTFP);
                            boolean jjtc022 = true;
                            jjtree.openNodeScope(jjtn022);
                            jjtreeOpenNodeScope(jjtn022);
                          }
                          try {
/*@egen*/
			  "strictfp"/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc022) {
                              jjtree.closeNodeScope(jjtn022, true);
                              jjtreeCloseNodeScope(jjtn022);
                            }
                          }
/*@egen*/            
			)
		)
	)*/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/

}

void ThrowsPatternListOpt():
{}
{/*@bgen(jjtree) ThrowsPatternList */
         {
           ASTThrowsPatternList jjtn001 = new ASTThrowsPatternList(JJTTHROWSPATTERNLIST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 [
	 	"throws"
		ThrowsPattern()
		("," ThrowsPattern()
		)*
	 ]/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/
	                   
}

void ThrowsPattern():
{}
{
	 ClassnamePatternExpressionNobang()
	|
	 "!"/*@bgen(jjtree) NegativeClassnamePattern */
             {
               ASTNegativeClassnamePattern jjtn001 = new ASTNegativeClassnamePattern(JJTNEGATIVECLASSNAMEPATTERN);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
             }
             try {
/*@egen*/ ClassnamePatternExpression()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
             }
/*@egen*/                          
}

void FormalPatternListOpt()                    :
{/*@bgen(jjtree) FormalPatternList */
  ASTFormalPatternList jjtn000 = new ASTFormalPatternList(JJTFORMALPATTERNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormalPatternList */
        try {
/*@egen*/
	[
	FormalPattern()
	("," FormalPattern())*
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void FormalPattern():
{}
{/*@bgen(jjtree) PackageRest */
         {
           ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 ".."/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/             
	|
	 "."/*@bgen(jjtree) PackageRest */
             {
               ASTPackageRest jjtn002 = new ASTPackageRest(JJTPACKAGEREST);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
             }
             try {
/*@egen*/ "."/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtreeCloseNodeScope(jjtn002);
               }
             }
/*@egen*/             
	|
	 TypePatternExpression()
}

void TypeIdStarListOpt()                :
{/*@bgen(jjtree) TypeIdStarList */
  ASTTypeIdStarList jjtn000 = new ASTTypeIdStarList(JJTTYPEIDSTARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeIdStarList */
        try {
/*@egen*/
	[
	(
	  TypeIdStar()
	  |/*@bgen(jjtree) PackageRest */
          {
            ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          }
          try {
/*@egen*/
	  ".."/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
/*@egen*/             
	)
	(
	","
      (
	  TypeIdStar()
	  |/*@bgen(jjtree) PackageRest */
          {
            ASTPackageRest jjtn002 = new ASTPackageRest(JJTPACKAGEREST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          }
          try {
/*@egen*/
	  ".."/*@bgen(jjtree)*/
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
/*@egen*/             
	  )
	)*
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void TypeIdStar()             :
{/*@bgen(jjtree) TypeIdStar */
  ASTTypeIdStar jjtn000 = new ASTTypeIdStar(JJTTYPEIDSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeIdStar */
         try {
/*@egen*//*@bgen(jjtree) NameWildcard */
         {
           ASTNameWildcard jjtn001 = new ASTNameWildcard(JJTNAMEWILDCARD);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
         }
         try {
/*@egen*/
	 "*"/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
         }
/*@egen*/              
	|
	 Type() [/*@bgen(jjtree) SubTypeOperator */
                  {
                    ASTSubTypeOperator jjtn002 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
                  }
                  try {
/*@egen*/ "+"/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtreeCloseNodeScope(jjtn002);
                    }
                  }
/*@egen*/                  ]/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
         }
/*@egen*/
}

void Around():
{}
{
	LOOKAHEAD({getToken(1).image.equals("around")}) <IDENTIFIER>
}

void Declare():
{}
{
	LOOKAHEAD({getToken(1).image.equals("declare")}) <IDENTIFIER>
}

void After():
{}
{
	LOOKAHEAD({getToken(1).image.equals("after")}) <IDENTIFIER>
}

void Before():
{}
{
	LOOKAHEAD({getToken(1).image.equals("before")}) <IDENTIFIER>
}

void Pointcut():
{}
{
	LOOKAHEAD({getToken(1).image.equals("pointcut")}) <IDENTIFIER>
}

void Get():
{}
{
	LOOKAHEAD({getToken(1).image.equals("get")}) <IDENTIFIER>
}

void Set():
{}
{
	LOOKAHEAD({getToken(1).image.equals("set")}) <IDENTIFIER>
}

void Aspect():
{}
{
	LOOKAHEAD({getToken(1).image.equals("aspect")}) <IDENTIFIER>
}

void Privileged():
{}
{
	LOOKAHEAD({getToken(1).image.equals("privileged")}) <IDENTIFIER>
}

void Adviceexecution():
{}
{
	LOOKAHEAD({getToken(1).image.equals("adviceexecution")}) <IDENTIFIER>
}

void Args():
{}
{
	LOOKAHEAD({getToken(1).image.equals("args")}) <IDENTIFIER>
}

void Call():
{}
{
	LOOKAHEAD({getToken(1).image.equals("call")}) <IDENTIFIER>
}

void Cflow():
{}
{
	LOOKAHEAD({getToken(1).image.equals("cflow")}) <IDENTIFIER>
}


void Cflowbelow():
{}
{
	LOOKAHEAD({getToken(1).image.equals("cflowbelow")}) <IDENTIFIER>
}

void Error():
{}
{
	LOOKAHEAD({getToken(1).image.equals("error")}) <IDENTIFIER>
}

void Execution():
{}
{
	LOOKAHEAD({getToken(1).image.equals("execution")}) <IDENTIFIER>
}

void Handler():
{}
{
	LOOKAHEAD({getToken(1).image.equals("handler")}) <IDENTIFIER>
}

void Initialization():
{}
{
	LOOKAHEAD({getToken(1).image.equals("initialization")}) <IDENTIFIER>
}

void Parents():
{}
{
	LOOKAHEAD({getToken(1).image.equals("parents")}) <IDENTIFIER>
}

void Precedence():
{}
{
	LOOKAHEAD({getToken(1).image.equals("precedence")}) <IDENTIFIER>
}

void Preinitialization():
{}
{
	LOOKAHEAD({getToken(1).image.equals("preinitialization")}) <IDENTIFIER>
}

void Returning():
{}
{
	LOOKAHEAD({getToken(1).image.equals("returning")}) <IDENTIFIER>
}

void Soft():
{}
{
	LOOKAHEAD({getToken(1).image.equals("soft")}) <IDENTIFIER>
}

void Staticinitialization():
{}
{
	LOOKAHEAD({getToken(1).image.equals("staticinitialization")}) <IDENTIFIER>
}

void Target():
{}
{
	LOOKAHEAD({getToken(1).image.equals("target")}) <IDENTIFIER>
}

void Throwing():
{}
{
	LOOKAHEAD({getToken(1).image.equals("throwing")}) <IDENTIFIER>
}

void Warning():
{}
{
	LOOKAHEAD({getToken(1).image.equals("warning")}) <IDENTIFIER>
}

void Within():
{}
{
	LOOKAHEAD({getToken(1).image.equals("within")}) <IDENTIFIER>
}

void Withincode():
{}
{
	LOOKAHEAD({getToken(1).image.equals("withincode")}) <IDENTIFIER>
}

void Pertarget():
{}
{
	LOOKAHEAD({getToken(1).image.equals("pertarget")}) <IDENTIFIER>
}

void Perthis():
{}
{
	LOOKAHEAD({getToken(1).image.equals("perthis")}) <IDENTIFIER>
}

void Percflow():
{}
{
	LOOKAHEAD({getToken(1).image.equals("percflow")}) <IDENTIFIER>
}

void Percflowbelow():
{}
{
	LOOKAHEAD({getToken(1).image.equals("percflowbelow")}) <IDENTIFIER>
}

void Issingleton():
{}
{
	LOOKAHEAD({getToken(1).image.equals("issingleton")}) <IDENTIFIER>
}

void Proceed():
{}
{
	LOOKAHEAD({getToken(1).image.equals("proceed")}) <IDENTIFIER>
}

void AND():
{}
{
	LOOKAHEAD({getToken(1).image.equals("AND")}) <IDENTIFIER>
}

void OR():
{}
{
	LOOKAHEAD({getToken(1).image.equals("OR")}) <IDENTIFIER>
}