/* Generated By:JJTree&JavaCC: Do not edit this line. AJPointcutParser.java */
package org.alia4j.aspectj.parser.ast;


/**
 * Grammar to parse AspectJ pointcuts. Based on the JavaCC grammar for Java 1.5
 * and the AspectJ grammar as published by the abc-group.
 * @author Sreenivasa Viswanadha	- Simplified and enhanced for 1.5
 * @author Stefan Kropp				- Added support for AspectJ
 */
@SuppressWarnings("all")
public class AJPointcutParser/*@bgen(jjtree)*/implements AJPointcutParserTreeConstants, AJPointcutParserConstants {/*@bgen(jjtree)*/
  protected JJTAJPointcutParserState jjtree = new JJTAJPointcutParserState();void jjtreeOpenNodeScope( Node node )
 {
 }

 void jjtreeCloseNodeScope( Node node )
 {
 }

 public SimpleNode getTreeRoot() {
        return (SimpleNode) jjtree.rootNode();
 }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    if (jj_2_1(2)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
        int dimension = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
     ASTPrimitiveArrayType jjtn001 = new ASTPrimitiveArrayType(JJTPRIMITIVEARRAYTYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
      try {
        PrimitiveType();
        label_1:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                              dimension++;
          if (jj_2_2(2)) {
            ;
          } else {
            break label_1;
          }
        }
                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                  jjtc001 = false;
                                                                  jjtreeCloseNodeScope(jjtn001);
                                                                 jjtn001.dimension = dimension;
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
      }
      break;
    case IDENTIFIER:
      ASTClassOrInterfaceArrayType jjtn002 = new ASTClassOrInterfaceArrayType(JJTCLASSORINTERFACEARRAYTYPE);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
        ClassOrInterfaceType();
        label_2:
        while (true) {
          if (jj_2_3(2)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                     dimension++;
        }
                                                                        jjtree.closeNodeScope(jjtn002,  dimension > 0);
                                                                        jjtc002 = false;
                                                                        jjtreeCloseNodeScope(jjtn002);
                                                                       jjtn002.dimension = dimension;
      } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte002;}
      }
      if (jjte002 instanceof ParseException) {
        {if (true) throw (ParseException)jjte002;}
      }
      {if (true) throw (Error)jjte002;}
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  dimension > 0);
        jjtreeCloseNodeScope(jjtn002);
      }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
 /*@bgen(jjtree) ClassOrInterfaceType */
  ASTClassOrInterfaceType jjtn000 = new ASTClassOrInterfaceType(JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
    ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(IDENTIFIER);
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtreeCloseNodeScope(jjtn001);
                   jjtn001.identifier = token.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      if (jj_2_4(2)) {
        TypeArguments();
      } else {
        ;
      }
      label_3:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
      ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(IDENTIFIER);
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtc002 = false;
                     jjtreeCloseNodeScope(jjtn002);
                     jjtn002.identifier = token.image;
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
        }
        if (jj_2_6(2)) {
          TypeArguments();
        } else {
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TypeArguments() throws ParseException {
 /*@bgen(jjtree) TypeArgumentList */
  ASTTypeArgumentList jjtn000 = new ASTTypeArgumentList(JJTTYPEARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
      TypeArgument();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        TypeArgument();
      }
      jj_consume_token(GT);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void TypeArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      ReferenceType();
      break;
    case HOOK:
     ASTUnknownTypeArgument jjtn001 = new ASTUnknownTypeArgument(JJTUNKNOWNTYPEARGUMENT);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(HOOK);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
      }
                              ASTUnknownBoundedTypeArgument jjtn002 = new ASTUnknownBoundedTypeArgument(JJTUNKNOWNBOUNDEDTYPEARGUMENT);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                              jjtreeOpenNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
        case SUPER:
          WildcardBounds();
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                                jjtreeCloseNodeScope(jjtn002);
                              }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
     ASTWildcardBoundsExtends jjtn001 = new ASTWildcardBoundsExtends(JJTWILDCARDBOUNDSEXTENDS);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(EXTENDS);
        ReferenceType();
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
      }
      break;
    case SUPER:
     ASTWildcardBoundsSuper jjtn002 = new ASTWildcardBoundsSuper(JJTWILDCARDBOUNDSSUPER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(SUPER);
        ReferenceType();
      } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
       jjtreeCloseNodeScope(jjtn002);
     }
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    ASTBoolean jjtn001 = new ASTBoolean(JJTBOOLEAN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(BOOLEAN);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    case CHAR:
    ASTChar jjtn002 = new ASTChar(JJTCHAR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(CHAR);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
      break;
    case BYTE:
    ASTByte jjtn003 = new ASTByte(JJTBYTE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(BYTE);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
      }
      break;
    case SHORT:
    ASTShort jjtn004 = new ASTShort(JJTSHORT);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
      try {
        jj_consume_token(SHORT);
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
      }
      break;
    case INT:
    ASTInt jjtn005 = new ASTInt(JJTINT);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
      try {
        jj_consume_token(INT);
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtreeCloseNodeScope(jjtn005);
    }
      }
      break;
    case LONG:
    ASTLong jjtn006 = new ASTLong(JJTLONG);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
      try {
        jj_consume_token(LONG);
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtreeCloseNodeScope(jjtn006);
    }
      }
      break;
    case FLOAT:
    ASTFloat jjtn007 = new ASTFloat(JJTFLOAT);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    jjtreeOpenNodeScope(jjtn007);
      try {
        jj_consume_token(FLOAT);
      } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
      jjtreeCloseNodeScope(jjtn007);
    }
      }
      break;
    case DOUBLE:
    ASTDouble jjtn008 = new ASTDouble(JJTDOUBLE);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
    jjtreeOpenNodeScope(jjtn008);
      try {
        jj_consume_token(DOUBLE);
      } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008, true);
      jjtreeCloseNodeScope(jjtn008);
    }
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    ASTVoid jjtn001 = new ASTVoid(JJTVOID);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(VOID);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
    ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(IDENTIFIER);
                  jjtree.closeNodeScope(jjtn001,  true);
                  jjtc001 = false;
                  jjtreeCloseNodeScope(jjtn001);
                 jjtn001.identifier = token.image;
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(DOT);
     ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(IDENTIFIER);
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtc002 = false;
                    jjtreeCloseNodeScope(jjtn002);
                   jjtn002.identifier = token.image;
        } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
       jjtreeCloseNodeScope(jjtn002);
     }
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/********************************************
 * THE ASPECTJ LANGUAGE GRAMMAR STARTS HERE *
 ********************************************/
  final public void PointcutExpression() throws ParseException {
 /*@bgen(jjtree) PointcutExpression */
  ASTPointcutExpression jjtn000 = new ASTPointcutExpression(JJTPOINTCUTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      OrPointcutExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void OrPointcutExpression() throws ParseException {
    AndPointcutExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      jj_consume_token(SC_OR);
                ASTOrPointcutExpression jjtn001 = new ASTOrPointcutExpression(JJTORPOINTCUTEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        AndPointcutExpression();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
    }
  }

  final public void AndPointcutExpression() throws ParseException {
    UnaryPointcutExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      jj_consume_token(SC_AND);
                ASTAndPointcutExpression jjtn001 = new ASTAndPointcutExpression(JJTANDPOINTCUTEXPRESSION);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        UnaryPointcutExpression();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
    }
  }

  final public void UnaryPointcutExpression() throws ParseException {
        boolean negated = false;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      jj_consume_token(BANG);
               negated = !negated;
    }
          ASTNegatedPointcutExpression jjtn001 = new ASTNegatedPointcutExpression(JJTNEGATEDPOINTCUTEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
    try {
      BasicPointcutExpression();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
    }
  }

  final public void BasicPointcutExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      OrPointcutExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_7(1)) {
        Call();
        jj_consume_token(LPAREN);
               ASTCallPointcut jjtn001 = new ASTCallPointcut(JJTCALLPOINTCUT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
        try {
          MethodConstructorPattern();
        } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_8(1)) {
        Execution();
        jj_consume_token(LPAREN);
               ASTExecutionPointcut jjtn002 = new ASTExecutionPointcut(JJTEXECUTIONPOINTCUT);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
        try {
          MethodConstructorPattern();
        } catch (Throwable jjte002) {
               if (jjtc002) {
                 jjtree.clearNodeScope(jjtn002);
                 jjtc002 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte002 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte002;}
               }
               if (jjte002 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte002;}
               }
               {if (true) throw (Error)jjte002;}
        } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtreeCloseNodeScope(jjtn002);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_9(1)) {
        Initialization();
        jj_consume_token(LPAREN);
               ASTInitializationPointcut jjtn003 = new ASTInitializationPointcut(JJTINITIALIZATIONPOINTCUT);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtreeOpenNodeScope(jjtn003);
        try {
          ConstructorPattern();
        } catch (Throwable jjte003) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte003 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte003;}
               }
               if (jjte003 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte003;}
               }
               {if (true) throw (Error)jjte003;}
        } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
                 jjtreeCloseNodeScope(jjtn003);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_10(1)) {
        Preinitialization();
        jj_consume_token(LPAREN);
               ASTPreinitializationPointcut jjtn004 = new ASTPreinitializationPointcut(JJTPREINITIALIZATIONPOINTCUT);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
               jjtreeOpenNodeScope(jjtn004);
        try {
          ConstructorPattern();
        } catch (Throwable jjte004) {
               if (jjtc004) {
                 jjtree.clearNodeScope(jjtn004);
                 jjtc004 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte004 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte004;}
               }
               if (jjte004 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte004;}
               }
               {if (true) throw (Error)jjte004;}
        } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
                 jjtreeCloseNodeScope(jjtn004);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_11(1)) {
        Staticinitialization();
        jj_consume_token(LPAREN);
               ASTStaticinitializationPointcut jjtn005 = new ASTStaticinitializationPointcut(JJTSTATICINITIALIZATIONPOINTCUT);
               boolean jjtc005 = true;
               jjtree.openNodeScope(jjtn005);
               jjtreeOpenNodeScope(jjtn005);
        try {
          ClassnamePatternExpression();
        } catch (Throwable jjte005) {
               if (jjtc005) {
                 jjtree.clearNodeScope(jjtn005);
                 jjtc005 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte005 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte005;}
               }
               if (jjte005 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte005;}
               }
               {if (true) throw (Error)jjte005;}
        } finally {
               if (jjtc005) {
                 jjtree.closeNodeScope(jjtn005, true);
                 jjtreeCloseNodeScope(jjtn005);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_12(1)) {
        Get();
        jj_consume_token(LPAREN);
               ASTGetPointcut jjtn006 = new ASTGetPointcut(JJTGETPOINTCUT);
               boolean jjtc006 = true;
               jjtree.openNodeScope(jjtn006);
               jjtreeOpenNodeScope(jjtn006);
        try {
          FieldPattern();
        } catch (Throwable jjte006) {
               if (jjtc006) {
                 jjtree.clearNodeScope(jjtn006);
                 jjtc006 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte006 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte006;}
               }
               if (jjte006 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte006;}
               }
               {if (true) throw (Error)jjte006;}
        } finally {
               if (jjtc006) {
                 jjtree.closeNodeScope(jjtn006, true);
                 jjtreeCloseNodeScope(jjtn006);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_13(1)) {
        Set();
        jj_consume_token(LPAREN);
               ASTSetPointcut jjtn007 = new ASTSetPointcut(JJTSETPOINTCUT);
               boolean jjtc007 = true;
               jjtree.openNodeScope(jjtn007);
               jjtreeOpenNodeScope(jjtn007);
        try {
          FieldPattern();
        } catch (Throwable jjte007) {
               if (jjtc007) {
                 jjtree.clearNodeScope(jjtn007);
                 jjtc007 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte007 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte007;}
               }
               if (jjte007 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte007;}
               }
               {if (true) throw (Error)jjte007;}
        } finally {
               if (jjtc007) {
                 jjtree.closeNodeScope(jjtn007, true);
                 jjtreeCloseNodeScope(jjtn007);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_14(1)) {
        Handler();
        jj_consume_token(LPAREN);
               ASTHandlerPointcut jjtn008 = new ASTHandlerPointcut(JJTHANDLERPOINTCUT);
               boolean jjtc008 = true;
               jjtree.openNodeScope(jjtn008);
               jjtreeOpenNodeScope(jjtn008);
        try {
          ClassnamePatternExpression();
        } catch (Throwable jjte008) {
               if (jjtc008) {
                 jjtree.clearNodeScope(jjtn008);
                 jjtc008 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte008 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte008;}
               }
               if (jjte008 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte008;}
               }
               {if (true) throw (Error)jjte008;}
        } finally {
               if (jjtc008) {
                 jjtree.closeNodeScope(jjtn008, true);
                 jjtreeCloseNodeScope(jjtn008);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_15(1)) {
        Adviceexecution();
        jj_consume_token(LPAREN);
        jj_consume_token(STAR);
        jj_consume_token(STAR);
                       ASTAdviceExecutionPointcut jjtn009 = new ASTAdviceExecutionPointcut(JJTADVICEEXECUTIONPOINTCUT);
                       boolean jjtc009 = true;
                       jjtree.openNodeScope(jjtn009);
                       jjtreeOpenNodeScope(jjtn009);
        try {
          jj_consume_token(RPAREN);
        } finally {
                       if (jjtc009) {
                         jjtree.closeNodeScope(jjtn009,  0);
                         jjtreeCloseNodeScope(jjtn009);
                       }
        }
      } else if (jj_2_16(1)) {
        Within();
        jj_consume_token(LPAREN);
               ASTWithinPointcut jjtn010 = new ASTWithinPointcut(JJTWITHINPOINTCUT);
               boolean jjtc010 = true;
               jjtree.openNodeScope(jjtn010);
               jjtreeOpenNodeScope(jjtn010);
        try {
          ClassnamePatternExpression();
        } catch (Throwable jjte010) {
               if (jjtc010) {
                 jjtree.clearNodeScope(jjtn010);
                 jjtc010 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte010 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte010;}
               }
               if (jjte010 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte010;}
               }
               {if (true) throw (Error)jjte010;}
        } finally {
               if (jjtc010) {
                 jjtree.closeNodeScope(jjtn010, true);
                 jjtreeCloseNodeScope(jjtn010);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_17(1)) {
        Withincode();
        jj_consume_token(LPAREN);
               ASTWithincodePointcut jjtn011 = new ASTWithincodePointcut(JJTWITHINCODEPOINTCUT);
               boolean jjtc011 = true;
               jjtree.openNodeScope(jjtn011);
               jjtreeOpenNodeScope(jjtn011);
        try {
          MethodConstructorPattern();
        } catch (Throwable jjte011) {
               if (jjtc011) {
                 jjtree.clearNodeScope(jjtn011);
                 jjtc011 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte011 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte011;}
               }
               if (jjte011 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte011;}
               }
               {if (true) throw (Error)jjte011;}
        } finally {
               if (jjtc011) {
                 jjtree.closeNodeScope(jjtn011, true);
                 jjtreeCloseNodeScope(jjtn011);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_18(1)) {
        Cflow();
        jj_consume_token(LPAREN);
               ASTCflowPointcut jjtn012 = new ASTCflowPointcut(JJTCFLOWPOINTCUT);
               boolean jjtc012 = true;
               jjtree.openNodeScope(jjtn012);
               jjtreeOpenNodeScope(jjtn012);
        try {
          PointcutExpression();
        } catch (Throwable jjte012) {
               if (jjtc012) {
                 jjtree.clearNodeScope(jjtn012);
                 jjtc012 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte012 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte012;}
               }
               if (jjte012 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte012;}
               }
               {if (true) throw (Error)jjte012;}
        } finally {
               if (jjtc012) {
                 jjtree.closeNodeScope(jjtn012, true);
                 jjtreeCloseNodeScope(jjtn012);
               }
        }
        jj_consume_token(RPAREN);
      } else if (jj_2_19(1)) {
        Cflowbelow();
        jj_consume_token(LPAREN);
               ASTCflowbelowPointcut jjtn013 = new ASTCflowbelowPointcut(JJTCFLOWBELOWPOINTCUT);
               boolean jjtc013 = true;
               jjtree.openNodeScope(jjtn013);
               jjtreeOpenNodeScope(jjtn013);
        try {
          PointcutExpression();
        } catch (Throwable jjte013) {
               if (jjtc013) {
                 jjtree.clearNodeScope(jjtn013);
                 jjtc013 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte013 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte013;}
               }
               if (jjte013 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte013;}
               }
               {if (true) throw (Error)jjte013;}
        } finally {
               if (jjtc013) {
                 jjtree.closeNodeScope(jjtn013, true);
                 jjtreeCloseNodeScope(jjtn013);
               }
        }
        jj_consume_token(RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jj_consume_token(IF);
          jj_consume_token(LPAREN);
               ASTIfPointcut jjtn014 = new ASTIfPointcut(JJTIFPOINTCUT);
               boolean jjtc014 = true;
               jjtree.openNodeScope(jjtn014);
               jjtreeOpenNodeScope(jjtn014);
          try {
            MethodCall();
          } catch (Throwable jjte014) {
               if (jjtc014) {
                 jjtree.clearNodeScope(jjtn014);
                 jjtc014 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte014 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte014;}
               }
               if (jjte014 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte014;}
               }
               {if (true) throw (Error)jjte014;}
          } finally {
               if (jjtc014) {
                 jjtree.closeNodeScope(jjtn014, true);
                 jjtreeCloseNodeScope(jjtn014);
               }
          }
          jj_consume_token(RPAREN);
          break;
        case THIS:
          jj_consume_token(THIS);
          jj_consume_token(LPAREN);
               ASTThisPointcut jjtn015 = new ASTThisPointcut(JJTTHISPOINTCUT);
               boolean jjtc015 = true;
               jjtree.openNodeScope(jjtn015);
               jjtreeOpenNodeScope(jjtn015);
          try {
            TypeIdStar();
          } catch (Throwable jjte015) {
               if (jjtc015) {
                 jjtree.clearNodeScope(jjtn015);
                 jjtc015 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte015 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte015;}
               }
               if (jjte015 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte015;}
               }
               {if (true) throw (Error)jjte015;}
          } finally {
               if (jjtc015) {
                 jjtree.closeNodeScope(jjtn015, true);
                 jjtreeCloseNodeScope(jjtn015);
               }
          }
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_20(1)) {
            Target();
            jj_consume_token(LPAREN);
               ASTTargetPointcut jjtn016 = new ASTTargetPointcut(JJTTARGETPOINTCUT);
               boolean jjtc016 = true;
               jjtree.openNodeScope(jjtn016);
               jjtreeOpenNodeScope(jjtn016);
            try {
              TypeIdStar();
            } catch (Throwable jjte016) {
               if (jjtc016) {
                 jjtree.clearNodeScope(jjtn016);
                 jjtc016 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte016 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte016;}
               }
               if (jjte016 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte016;}
               }
               {if (true) throw (Error)jjte016;}
            } finally {
               if (jjtc016) {
                 jjtree.closeNodeScope(jjtn016, true);
                 jjtreeCloseNodeScope(jjtn016);
               }
            }
            jj_consume_token(RPAREN);
          } else if (jj_2_21(1)) {
            Args();
            jj_consume_token(LPAREN);
               ASTArgsPointcut jjtn017 = new ASTArgsPointcut(JJTARGSPOINTCUT);
               boolean jjtc017 = true;
               jjtree.openNodeScope(jjtn017);
               jjtreeOpenNodeScope(jjtn017);
            try {
              TypeIdStarListOpt();
            } catch (Throwable jjte017) {
               if (jjtc017) {
                 jjtree.clearNodeScope(jjtn017);
                 jjtc017 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte017 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte017;}
               }
               if (jjte017 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte017;}
               }
               {if (true) throw (Error)jjte017;}
            } finally {
               if (jjtc017) {
                 jjtree.closeNodeScope(jjtn017, true);
                 jjtreeCloseNodeScope(jjtn017);
               }
            }
            jj_consume_token(RPAREN);
          } else if (jj_2_22(1)) {
            Returning();
            jj_consume_token(LPAREN);
               ASTReturningPointcut jjtn018 = new ASTReturningPointcut(JJTRETURNINGPOINTCUT);
               boolean jjtc018 = true;
               jjtree.openNodeScope(jjtn018);
               jjtreeOpenNodeScope(jjtn018);
            try {
              TypeIdStar();
            } catch (Throwable jjte018) {
               if (jjtc018) {
                 jjtree.clearNodeScope(jjtn018);
                 jjtc018 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte018 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte018;}
               }
               if (jjte018 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte018;}
               }
               {if (true) throw (Error)jjte018;}
            } finally {
               if (jjtc018) {
                 jjtree.closeNodeScope(jjtn018, true);
                 jjtreeCloseNodeScope(jjtn018);
               }
            }
            jj_consume_token(RPAREN);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENTIFIER:
              Name();
              jj_consume_token(LPAREN);
               ASTNamedPointcut jjtn019 = new ASTNamedPointcut(JJTNAMEDPOINTCUT);
               boolean jjtc019 = true;
               jjtree.openNodeScope(jjtn019);
               jjtreeOpenNodeScope(jjtn019);
              try {
                TypeIdStarListOpt();
              } catch (Throwable jjte019) {
               if (jjtc019) {
                 jjtree.clearNodeScope(jjtn019);
                 jjtc019 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte019 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte019;}
               }
               if (jjte019 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte019;}
               }
               {if (true) throw (Error)jjte019;}
              } finally {
               if (jjtc019) {
                 jjtree.closeNodeScope(jjtn019, true);
                 jjtreeCloseNodeScope(jjtn019);
               }
              }
              jj_consume_token(RPAREN);
              break;
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void MethodCall() throws ParseException {
 /*@bgen(jjtree) MethodCall */
  ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Name();
      jj_consume_token(LPAREN);
      IdListOpt();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void IdListOpt() throws ParseException {
 /*@bgen(jjtree) IdList */
  ASTIdList jjtn000 = new ASTIdList(JJTIDLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(IDENTIFIER);
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                      jjtreeCloseNodeScope(jjtn001);
                     jjtn001.identifier = token.image;
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001,  true);
          jjtreeCloseNodeScope(jjtn001);
        }
        }
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_9;
          }
          jj_consume_token(COMMA);
            ASTIdentifier jjtn002 = new ASTIdentifier(JJTIDENTIFIER);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(IDENTIFIER);
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                          jjtreeCloseNodeScope(jjtn002);
                         jjtn002.identifier = token.image;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// void MethodSignature() #MethodSignature:
// {}
// {
// ResultType()
// 	Name()
// 	"("
// 	[ Name()
// 	  ( "," Name() )*
// 	]
// 	")"
// }
  final public void NamePattern() throws ParseException {
 /*@bgen(jjtree) NamePattern */
  ASTNamePattern jjtn000 = new ASTNamePattern(JJTNAMEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      SimpleNamePattern();
      label_10:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          break;
        case 125:
                           ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(125);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SimpleNamePattern();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void SimpleNamePattern() throws ParseException {
 /*@bgen(jjtree) SimpleNamePattern */
  ASTSimpleNamePattern jjtn000 = new ASTSimpleNamePattern(JJTSIMPLENAMEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLINIT:
          ASTClinitIdentifier jjtn001 = new ASTClinitIdentifier(JJTCLINITIDENTIFIER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(CLINIT);
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtreeCloseNodeScope(jjtn001);
          }
        }
        break;
      case IDENTIFIER:
      case STAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
                   ASTNameWildcard jjtn002 = new ASTNameWildcard(JJTNAMEWILDCARD);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(STAR);
          } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtreeCloseNodeScope(jjtn002);
                   }
          }
          break;
        case IDENTIFIER:
                   ASTIdentifier jjtn003 = new ASTIdentifier(JJTIDENTIFIER);
                   boolean jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtreeOpenNodeScope(jjtn003);
          try {
            jj_consume_token(IDENTIFIER);
                                  jjtree.closeNodeScope(jjtn003, true);
                                  jjtc003 = false;
                                  jjtreeCloseNodeScope(jjtn003);
                                 jjtn003.identifier = token.image;
          } finally {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003, true);
                     jjtreeCloseNodeScope(jjtn003);
                   }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_11:
        while (true) {
          if (getToken(1).specialToken == null && (getToken(1).kind == STAR || getToken(1).kind == IDENTIFIER)) {
            ;
          } else {
            break label_11;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
                   ASTNameWildcard jjtn004 = new ASTNameWildcard(JJTNAMEWILDCARD);
                   boolean jjtc004 = true;
                   jjtree.openNodeScope(jjtn004);
                   jjtreeOpenNodeScope(jjtn004);
            try {
              jj_consume_token(STAR);
            } finally {
                   if (jjtc004) {
                     jjtree.closeNodeScope(jjtn004, true);
                     jjtreeCloseNodeScope(jjtn004);
                   }
            }
            break;
          case IDENTIFIER:
                   ASTIdentifier jjtn005 = new ASTIdentifier(JJTIDENTIFIER);
                   boolean jjtc005 = true;
                   jjtree.openNodeScope(jjtn005);
                   jjtreeOpenNodeScope(jjtn005);
            try {
              jj_consume_token(IDENTIFIER);
                                   jjtree.closeNodeScope(jjtn005, true);
                                   jjtc005 = false;
                                   jjtreeCloseNodeScope(jjtn005);
                                  jjtn005.identifier = token.image;
            } finally {
                   if (jjtc005) {
                     jjtree.closeNodeScope(jjtn005, true);
                     jjtreeCloseNodeScope(jjtn005);
                   }
            }
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ClasstypeDotId() throws ParseException {
 /*@bgen(jjtree) ClasstypeDotId */
  ASTClasstypeDotId jjtn000 = new ASTClasstypeDotId(JJTCLASSTYPEDOTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLINIT:
      case IDENTIFIER:
      case STAR:
        NamePattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
             ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtreeCloseNodeScope(jjtn001);
             }
          }
          jj_consume_token(DOT);
          SimpleNamePattern();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        TypePatternExpression();
        jj_consume_token(RPAREN);
        jj_consume_token(DOT);
        SimpleNamePattern();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ClasstypeDotNew() throws ParseException {
 /*@bgen(jjtree) ClasstypeDotNew */
  ASTClasstypeDotNew jjtn000 = new ASTClasstypeDotNew(JJTCLASSTYPEDOTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
           ASTNew jjtn001 = new ASTNew(JJTNEW);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(NEW);
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
        }
        break;
      case CLINIT:
      case IDENTIFIER:
      case STAR:
        NamePattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
            ASTSubTypeOperator jjtn002 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(PLUS);
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
          }
          jj_consume_token(DOT);
          break;
        case 125:
                                       ASTPackageRest jjtn003 = new ASTPackageRest(JJTPACKAGEREST);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                       jjtreeOpenNodeScope(jjtn003);
          try {
            jj_consume_token(125);
          } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003, true);
                                         jjtreeCloseNodeScope(jjtn003);
                                       }
          }
          break;
        case DOT:
          jj_consume_token(DOT);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                ASTNew jjtn004 = new ASTNew(JJTNEW);
                                                                boolean jjtc004 = true;
                                                                jjtree.openNodeScope(jjtn004);
                                                                jjtreeOpenNodeScope(jjtn004);
        try {
          jj_consume_token(NEW);
        } finally {
                                                                if (jjtc004) {
                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                  jjtreeCloseNodeScope(jjtn004);
                                                                }
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        TypePatternExpression();
        jj_consume_token(RPAREN);
        jj_consume_token(DOT);
                                               ASTNew jjtn005 = new ASTNew(JJTNEW);
                                               boolean jjtc005 = true;
                                               jjtree.openNodeScope(jjtn005);
                                               jjtreeOpenNodeScope(jjtn005);
        try {
          jj_consume_token(NEW);
        } finally {
                                               if (jjtc005) {
                                                 jjtree.closeNodeScope(jjtn005, true);
                                                 jjtreeCloseNodeScope(jjtn005);
                                               }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void TypePatternExpression() throws ParseException {
    OrTypePatternExpression();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_12;
      }
      jj_consume_token(SC_AND);
                  ASTAndTypePatternExpression jjtn001 = new ASTAndTypePatternExpression(JJTANDTYPEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        OrTypePatternExpression();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void OrTypePatternExpression() throws ParseException {
    UnaryTypePatternExpression();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      jj_consume_token(SC_OR);
                   ASTOrTypePatternExpression jjtn001 = new ASTOrTypePatternExpression(JJTORTYPEPATTERNEXPRESSION);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
      try {
        UnaryTypePatternExpression();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                     jjtreeCloseNodeScope(jjtn001);
                   }
      }
    }
  }

  final public void UnaryTypePatternExpression() throws ParseException {
        boolean negated = false;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
      jj_consume_token(BANG);
                negated = !negated;
    }
          ASTNegatedTypePatternExpression jjtn001 = new ASTNegatedTypePatternExpression(JJTNEGATEDTYPEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
    try {
      BasicTypePattern();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
    }
  }

  final public void BasicTypePattern() throws ParseException {
 /*@bgen(jjtree) BasicTypePattern */
        ASTBasicTypePattern jjtn000 = new ASTBasicTypePattern(JJTBASICTYPEPATTERN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);int arrayDimension = 0;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
           ASTVoid jjtn001 = new ASTVoid(JJTVOID);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(VOID);
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
        }
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case CLINIT:
      case IDENTIFIER:
      case STAR:
           ASTArrayTypePatternExpression jjtn002 = new ASTArrayTypePatternExpression(JJTARRAYTYPEPATTERNEXPRESSION);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
        try {
          BaseTypePattern();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[28] = jj_gen;
              break label_15;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                         arrayDimension++;
          }
                                                                  jjtree.closeNodeScope(jjtn002,  arrayDimension > 0);
                                                                  jjtc002 = false;
                                                                  jjtreeCloseNodeScope(jjtn002);
                                                                  jjtn002.arrayDimension=arrayDimension;
        } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
        } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  arrayDimension > 0);
             jjtreeCloseNodeScope(jjtn002);
           }
        }
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        TypePatternExpression();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void BaseTypePattern() throws ParseException {
 /*@bgen(jjtree) BaseTypePattern */
  ASTBaseTypePattern jjtn000 = new ASTBaseTypePattern(JJTBASETYPEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
        break;
      case CLINIT:
      case IDENTIFIER:
      case STAR:
        NamePattern();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
          }
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void ClassnamePatternExpression() throws ParseException {
    AndClassnamePatternExpression();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
      jj_consume_token(SC_OR);
                  ASTOrClassnamePatternExpression jjtn001 = new ASTOrClassnamePatternExpression(JJTORCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        AndClassnamePatternExpression();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void AndClassnamePatternExpression() throws ParseException {
    UnaryClassnamePatternExpression();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_17;
      }
      jj_consume_token(SC_AND);
                  ASTAndClassnamePatternExpression jjtn001 = new ASTAndClassnamePatternExpression(JJTANDCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        UnaryClassnamePatternExpression();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void UnaryClassnamePatternExpression() throws ParseException {
        boolean negated = false;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_18;
      }
      jj_consume_token(BANG);
                negated = !negated;
    }
          ASTNegatedClassnamePatternExpression jjtn001 = new ASTNegatedClassnamePatternExpression(JJTNEGATEDCLASSNAMEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
    try {
      BasicClassnamePattern();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
    }
  }

  final public void BasicClassnamePattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLINIT:
    case IDENTIFIER:
    case STAR:
      NamePattern();
                         ASTBasicClassnamePattern jjtn002 = new ASTBasicClassnamePattern(JJTBASICCLASSNAMEPATTERN);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
          }
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtreeCloseNodeScope(jjtn002);
                         }
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      ClassnamePatternExpression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// "Within"- patterns with alternative operators (|| -> OR, && -> AND) needed for
// parsing, "include" and "exclude" attributes in aop.xml
  final public void ClassnamePatternExpressionAlternativeOperators() throws ParseException {
    AndClassnamePatternExpressionAlternativeOperators();
    label_19:
    while (true) {
      if (jj_2_24(1)) {
        ;
      } else {
        break label_19;
      }
      OR();
                  ASTOrClassnamePatternExpression jjtn001 = new ASTOrClassnamePatternExpression(JJTORCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        AndClassnamePatternExpressionAlternativeOperators();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void AndClassnamePatternExpressionAlternativeOperators() throws ParseException {
    UnaryClassnamePatternExpressionAlternativeOperators();
    label_20:
    while (true) {
      if (jj_2_25(1)) {
        ;
      } else {
        break label_20;
      }
      AND();
                  ASTAndClassnamePatternExpression jjtn001 = new ASTAndClassnamePatternExpression(JJTANDCLASSNAMEPATTERNEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        UnaryClassnamePatternExpressionAlternativeOperators();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void UnaryClassnamePatternExpressionAlternativeOperators() throws ParseException {
        boolean negated = false;
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_21;
      }
      jj_consume_token(BANG);
                negated = !negated;
    }
          ASTNegatedClassnamePatternExpression jjtn001 = new ASTNegatedClassnamePatternExpression(JJTNEGATEDCLASSNAMEPATTERNEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtreeOpenNodeScope(jjtn001);
    try {
      BasicClassnamePatternAlternativeOperators();
    } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
    } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  negated);
            jjtreeCloseNodeScope(jjtn001);
          }
    }
  }

  final public void BasicClassnamePatternAlternativeOperators() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLINIT:
    case IDENTIFIER:
    case STAR:
      NamePattern();
                         ASTBasicClassnamePattern jjtn002 = new ASTBasicClassnamePattern(JJTBASICCLASSNAMEPATTERN);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                         jjtreeOpenNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                           ASTSubTypeOperator jjtn001 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(PLUS);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtreeCloseNodeScope(jjtn001);
                           }
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                           jjtreeCloseNodeScope(jjtn002);
                         }
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      ClassnamePatternExpressionAlternativeOperators();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// end of alternative operators
  final public void ClassnamePatternExpressionNobang() throws ParseException {
    AndClassnamePatternExpressionNobang();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_22;
      }
      jj_consume_token(SC_OR);
                  ASTOrClassnamePatternExpressionNobang jjtn001 = new ASTOrClassnamePatternExpressionNobang(JJTORCLASSNAMEPATTERNEXPRESSIONNOBANG);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        AndClassnamePatternExpressionNobang();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void AndClassnamePatternExpressionNobang() throws ParseException {
    BasicClassnamePattern();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_23;
      }
      jj_consume_token(SC_AND);
                  ASTAndClassnamePatternExpressionNobang jjtn001 = new ASTAndClassnamePatternExpressionNobang(JJTANDCLASSNAMEPATTERNEXPRESSIONNOBANG);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtreeOpenNodeScope(jjtn001);
      try {
        UnaryClassnamePatternExpression();
      } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                    jjtreeCloseNodeScope(jjtn001);
                  }
      }
    }
  }

  final public void MethodConstructorPattern() throws ParseException {
    if (jj_2_26(2147483647)) {
      ConstructorPattern();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case CLINIT:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case STAR:
        MethodPattern();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void MethodPattern() throws ParseException {
 /*@bgen(jjtree) MethodPattern */
  ASTMethodPattern jjtn000 = new ASTMethodPattern(JJTMETHODPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ModifierPatternExpression();
      TypePatternExpression();
      ClasstypeDotId();
      jj_consume_token(LPAREN);
      FormalPatternListOpt();
      jj_consume_token(RPAREN);
      ThrowsPatternListOpt();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ConstructorPattern() throws ParseException {
 /*@bgen(jjtree) ConstructorPattern */
  ASTConstructorPattern jjtn000 = new ASTConstructorPattern(JJTCONSTRUCTORPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ModifierPatternExpression();
      ClasstypeDotNew();
      jj_consume_token(LPAREN);
      FormalPatternListOpt();
      jj_consume_token(RPAREN);
      ThrowsPatternListOpt();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void FieldPattern() throws ParseException {
 /*@bgen(jjtree) FieldPattern */
  ASTFieldPattern jjtn000 = new ASTFieldPattern(JJTFIELDPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      ModifierPatternExpression();
      TypePatternExpression();
      ClasstypeDotId();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ModifierPatternExpression() throws ParseException {
 /*@bgen(jjtree) ModifiersPattern */
  ASTModifiersPattern jjtn000 = new ASTModifiersPattern(JJTMODIFIERSPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      label_24:
      while (true) {
        if (jj_2_27(2)) {
          ;
        } else {
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
          jj_consume_token(BANG);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
                            ASTNotPublic jjtn001 = new ASTNotPublic(JJTNOTPUBLIC);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
            try {
              jj_consume_token(PUBLIC);
            } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
            }
            break;
          case STATIC:
                            ASTNotStatic jjtn002 = new ASTNotStatic(JJTNOTSTATIC);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                            jjtreeOpenNodeScope(jjtn002);
            try {
              jj_consume_token(STATIC);
            } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002, true);
                              jjtreeCloseNodeScope(jjtn002);
                            }
            }
            break;
          case PROTECTED:
                            ASTNotProtected jjtn003 = new ASTNotProtected(JJTNOTPROTECTED);
                            boolean jjtc003 = true;
                            jjtree.openNodeScope(jjtn003);
                            jjtreeOpenNodeScope(jjtn003);
            try {
              jj_consume_token(PROTECTED);
            } finally {
                            if (jjtc003) {
                              jjtree.closeNodeScope(jjtn003, true);
                              jjtreeCloseNodeScope(jjtn003);
                            }
            }
            break;
          case PRIVATE:
                            ASTNotPrivate jjtn004 = new ASTNotPrivate(JJTNOTPRIVATE);
                            boolean jjtc004 = true;
                            jjtree.openNodeScope(jjtn004);
                            jjtreeOpenNodeScope(jjtn004);
            try {
              jj_consume_token(PRIVATE);
            } finally {
                            if (jjtc004) {
                              jjtree.closeNodeScope(jjtn004, true);
                              jjtreeCloseNodeScope(jjtn004);
                            }
            }
            break;
          case FINAL:
                            ASTNotFinal jjtn005 = new ASTNotFinal(JJTNOTFINAL);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                            jjtreeOpenNodeScope(jjtn005);
            try {
              jj_consume_token(FINAL);
            } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                              jjtreeCloseNodeScope(jjtn005);
                            }
            }
            break;
          case ABSTRACT:
                            ASTNotAbstract jjtn006 = new ASTNotAbstract(JJTNOTABSTRACT);
                            boolean jjtc006 = true;
                            jjtree.openNodeScope(jjtn006);
                            jjtreeOpenNodeScope(jjtn006);
            try {
              jj_consume_token(ABSTRACT);
            } finally {
                            if (jjtc006) {
                              jjtree.closeNodeScope(jjtn006, true);
                              jjtreeCloseNodeScope(jjtn006);
                            }
            }
            break;
          case SYNCHRONIZED:
                            ASTNotSynchronized jjtn007 = new ASTNotSynchronized(JJTNOTSYNCHRONIZED);
                            boolean jjtc007 = true;
                            jjtree.openNodeScope(jjtn007);
                            jjtreeOpenNodeScope(jjtn007);
            try {
              jj_consume_token(SYNCHRONIZED);
            } finally {
                            if (jjtc007) {
                              jjtree.closeNodeScope(jjtn007, true);
                              jjtreeCloseNodeScope(jjtn007);
                            }
            }
            break;
          case NATIVE:
                            ASTNotNative jjtn008 = new ASTNotNative(JJTNOTNATIVE);
                            boolean jjtc008 = true;
                            jjtree.openNodeScope(jjtn008);
                            jjtreeOpenNodeScope(jjtn008);
            try {
              jj_consume_token(NATIVE);
            } finally {
                            if (jjtc008) {
                              jjtree.closeNodeScope(jjtn008, true);
                              jjtreeCloseNodeScope(jjtn008);
                            }
            }
            break;
          case TRANSIENT:
                            ASTNotTransient jjtn009 = new ASTNotTransient(JJTNOTTRANSIENT);
                            boolean jjtc009 = true;
                            jjtree.openNodeScope(jjtn009);
                            jjtreeOpenNodeScope(jjtn009);
            try {
              jj_consume_token(TRANSIENT);
            } finally {
                            if (jjtc009) {
                              jjtree.closeNodeScope(jjtn009, true);
                              jjtreeCloseNodeScope(jjtn009);
                            }
            }
            break;
          case VOLATILE:
                            ASTNotVolatile jjtn010 = new ASTNotVolatile(JJTNOTVOLATILE);
                            boolean jjtc010 = true;
                            jjtree.openNodeScope(jjtn010);
                            jjtreeOpenNodeScope(jjtn010);
            try {
              jj_consume_token(VOLATILE);
            } finally {
                            if (jjtc010) {
                              jjtree.closeNodeScope(jjtn010, true);
                              jjtreeCloseNodeScope(jjtn010);
                            }
            }
            break;
          case STRICTFP:
                            ASTNotStrictfp jjtn011 = new ASTNotStrictfp(JJTNOTSTRICTFP);
                            boolean jjtc011 = true;
                            jjtree.openNodeScope(jjtn011);
                            jjtreeOpenNodeScope(jjtn011);
            try {
              jj_consume_token(STRICTFP);
            } finally {
                            if (jjtc011) {
                              jjtree.closeNodeScope(jjtn011, true);
                              jjtreeCloseNodeScope(jjtn011);
                            }
            }
            break;
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case ABSTRACT:
        case FINAL:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PUBLIC:
                            ASTPublic jjtn012 = new ASTPublic(JJTPUBLIC);
                            boolean jjtc012 = true;
                            jjtree.openNodeScope(jjtn012);
                            jjtreeOpenNodeScope(jjtn012);
            try {
              jj_consume_token(PUBLIC);
            } finally {
                            if (jjtc012) {
                              jjtree.closeNodeScope(jjtn012, true);
                              jjtreeCloseNodeScope(jjtn012);
                            }
            }
            break;
          case STATIC:
                            ASTStatic jjtn013 = new ASTStatic(JJTSTATIC);
                            boolean jjtc013 = true;
                            jjtree.openNodeScope(jjtn013);
                            jjtreeOpenNodeScope(jjtn013);
            try {
              jj_consume_token(STATIC);
            } finally {
                            if (jjtc013) {
                              jjtree.closeNodeScope(jjtn013, true);
                              jjtreeCloseNodeScope(jjtn013);
                            }
            }
            break;
          case PROTECTED:
                            ASTProtected jjtn014 = new ASTProtected(JJTPROTECTED);
                            boolean jjtc014 = true;
                            jjtree.openNodeScope(jjtn014);
                            jjtreeOpenNodeScope(jjtn014);
            try {
              jj_consume_token(PROTECTED);
            } finally {
                            if (jjtc014) {
                              jjtree.closeNodeScope(jjtn014, true);
                              jjtreeCloseNodeScope(jjtn014);
                            }
            }
            break;
          case PRIVATE:
                            ASTPrivate jjtn015 = new ASTPrivate(JJTPRIVATE);
                            boolean jjtc015 = true;
                            jjtree.openNodeScope(jjtn015);
                            jjtreeOpenNodeScope(jjtn015);
            try {
              jj_consume_token(PRIVATE);
            } finally {
                            if (jjtc015) {
                              jjtree.closeNodeScope(jjtn015, true);
                              jjtreeCloseNodeScope(jjtn015);
                            }
            }
            break;
          case FINAL:
                            ASTFinal jjtn016 = new ASTFinal(JJTFINAL);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
                            jjtreeOpenNodeScope(jjtn016);
            try {
              jj_consume_token(FINAL);
            } finally {
                            if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016, true);
                              jjtreeCloseNodeScope(jjtn016);
                            }
            }
            break;
          case ABSTRACT:
                            ASTAbstract jjtn017 = new ASTAbstract(JJTABSTRACT);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
                            jjtreeOpenNodeScope(jjtn017);
            try {
              jj_consume_token(ABSTRACT);
            } finally {
                            if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                              jjtreeCloseNodeScope(jjtn017);
                            }
            }
            break;
          case SYNCHRONIZED:
                            ASTSynchronized jjtn018 = new ASTSynchronized(JJTSYNCHRONIZED);
                            boolean jjtc018 = true;
                            jjtree.openNodeScope(jjtn018);
                            jjtreeOpenNodeScope(jjtn018);
            try {
              jj_consume_token(SYNCHRONIZED);
            } finally {
                            if (jjtc018) {
                              jjtree.closeNodeScope(jjtn018, true);
                              jjtreeCloseNodeScope(jjtn018);
                            }
            }
            break;
          case NATIVE:
                            ASTNative jjtn019 = new ASTNative(JJTNATIVE);
                            boolean jjtc019 = true;
                            jjtree.openNodeScope(jjtn019);
                            jjtreeOpenNodeScope(jjtn019);
            try {
              jj_consume_token(NATIVE);
            } finally {
                            if (jjtc019) {
                              jjtree.closeNodeScope(jjtn019, true);
                              jjtreeCloseNodeScope(jjtn019);
                            }
            }
            break;
          case TRANSIENT:
                            ASTTransient jjtn020 = new ASTTransient(JJTTRANSIENT);
                            boolean jjtc020 = true;
                            jjtree.openNodeScope(jjtn020);
                            jjtreeOpenNodeScope(jjtn020);
            try {
              jj_consume_token(TRANSIENT);
            } finally {
                            if (jjtc020) {
                              jjtree.closeNodeScope(jjtn020, true);
                              jjtreeCloseNodeScope(jjtn020);
                            }
            }
            break;
          case VOLATILE:
                            ASTVolatile jjtn021 = new ASTVolatile(JJTVOLATILE);
                            boolean jjtc021 = true;
                            jjtree.openNodeScope(jjtn021);
                            jjtreeOpenNodeScope(jjtn021);
            try {
              jj_consume_token(VOLATILE);
            } finally {
                            if (jjtc021) {
                              jjtree.closeNodeScope(jjtn021, true);
                              jjtreeCloseNodeScope(jjtn021);
                            }
            }
            break;
          case STRICTFP:
                            ASTStrictfp jjtn022 = new ASTStrictfp(JJTSTRICTFP);
                            boolean jjtc022 = true;
                            jjtree.openNodeScope(jjtn022);
                            jjtreeOpenNodeScope(jjtn022);
            try {
              jj_consume_token(STRICTFP);
            } finally {
                            if (jjtc022) {
                              jjtree.closeNodeScope(jjtn022, true);
                              jjtreeCloseNodeScope(jjtn022);
                            }
            }
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ThrowsPatternListOpt() throws ParseException {
           ASTThrowsPatternList jjtn001 = new ASTThrowsPatternList(JJTTHROWSPATTERNLIST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        ThrowsPattern();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          ThrowsPattern();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
    } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
    }
  }

  final public void ThrowsPattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLINIT:
    case IDENTIFIER:
    case LPAREN:
    case STAR:
      ClassnamePatternExpressionNobang();
      break;
    case BANG:
      jj_consume_token(BANG);
               ASTNegativeClassnamePattern jjtn001 = new ASTNegativeClassnamePattern(JJTNEGATIVECLASSNAMEPATTERN);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
      try {
        ClassnamePatternExpression();
      } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FormalPatternListOpt() throws ParseException {
 /*@bgen(jjtree) FormalPatternList */
  ASTFormalPatternList jjtn000 = new ASTFormalPatternList(JJTFORMALPATTERNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case VOID:
      case CLINIT:
      case IDENTIFIER:
      case LPAREN:
      case DOT:
      case BANG:
      case STAR:
      case 125:
        FormalPattern();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_26;
          }
          jj_consume_token(COMMA);
          FormalPattern();
        }
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void FormalPattern() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 125:
           ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(125);
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
      }
      break;
    case DOT:
      jj_consume_token(DOT);
               ASTPackageRest jjtn002 = new ASTPackageRest(JJTPACKAGEREST);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
               jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(DOT);
      } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002, true);
                 jjtreeCloseNodeScope(jjtn002);
               }
      }
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case CLINIT:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case STAR:
      TypePatternExpression();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TypeIdStarListOpt() throws ParseException {
 /*@bgen(jjtree) TypeIdStarList */
  ASTTypeIdStarList jjtn000 = new ASTTypeIdStarList(JJTTYPEIDSTARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
      case STAR:
      case 125:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
        case STAR:
          TypeIdStar();
          break;
        case 125:
            ASTPackageRest jjtn001 = new ASTPackageRest(JJTPACKAGEREST);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(125);
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
          }
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_27;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
          case IDENTIFIER:
          case STAR:
            TypeIdStar();
            break;
          case 125:
            ASTPackageRest jjtn002 = new ASTPackageRest(JJTPACKAGEREST);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
            try {
              jj_consume_token(125);
            } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
            }
            break;
          default:
            jj_la1[54] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void TypeIdStar() throws ParseException {
 /*@bgen(jjtree) TypeIdStar */
  ASTTypeIdStar jjtn000 = new ASTTypeIdStar(JJTTYPEIDSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
           ASTNameWildcard jjtn001 = new ASTNameWildcard(JJTNAMEWILDCARD);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(STAR);
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
        }
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:
        Type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
                    ASTSubTypeOperator jjtn002 = new ASTSubTypeOperator(JJTSUBTYPEOPERATOR);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(PLUS);
          } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, true);
                      jjtreeCloseNodeScope(jjtn002);
                    }
          }
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtreeCloseNodeScope(jjtn000);
           }
    }
  }

  final public void Around() throws ParseException {
    if (getToken(1).image.equals("around")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Declare() throws ParseException {
    if (getToken(1).image.equals("declare")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void After() throws ParseException {
    if (getToken(1).image.equals("after")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Before() throws ParseException {
    if (getToken(1).image.equals("before")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Pointcut() throws ParseException {
    if (getToken(1).image.equals("pointcut")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Get() throws ParseException {
    if (getToken(1).image.equals("get")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Set() throws ParseException {
    if (getToken(1).image.equals("set")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Aspect() throws ParseException {
    if (getToken(1).image.equals("aspect")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Privileged() throws ParseException {
    if (getToken(1).image.equals("privileged")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Adviceexecution() throws ParseException {
    if (getToken(1).image.equals("adviceexecution")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Args() throws ParseException {
    if (getToken(1).image.equals("args")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Call() throws ParseException {
    if (getToken(1).image.equals("call")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Cflow() throws ParseException {
    if (getToken(1).image.equals("cflow")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Cflowbelow() throws ParseException {
    if (getToken(1).image.equals("cflowbelow")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Error() throws ParseException {
    if (getToken(1).image.equals("error")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Execution() throws ParseException {
    if (getToken(1).image.equals("execution")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Handler() throws ParseException {
    if (getToken(1).image.equals("handler")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Initialization() throws ParseException {
    if (getToken(1).image.equals("initialization")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Parents() throws ParseException {
    if (getToken(1).image.equals("parents")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Precedence() throws ParseException {
    if (getToken(1).image.equals("precedence")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Preinitialization() throws ParseException {
    if (getToken(1).image.equals("preinitialization")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Returning() throws ParseException {
    if (getToken(1).image.equals("returning")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Soft() throws ParseException {
    if (getToken(1).image.equals("soft")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Staticinitialization() throws ParseException {
    if (getToken(1).image.equals("staticinitialization")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Target() throws ParseException {
    if (getToken(1).image.equals("target")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Throwing() throws ParseException {
    if (getToken(1).image.equals("throwing")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Warning() throws ParseException {
    if (getToken(1).image.equals("warning")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Within() throws ParseException {
    if (getToken(1).image.equals("within")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Withincode() throws ParseException {
    if (getToken(1).image.equals("withincode")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Pertarget() throws ParseException {
    if (getToken(1).image.equals("pertarget")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Perthis() throws ParseException {
    if (getToken(1).image.equals("perthis")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Percflow() throws ParseException {
    if (getToken(1).image.equals("percflow")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Percflowbelow() throws ParseException {
    if (getToken(1).image.equals("percflowbelow")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Issingleton() throws ParseException {
    if (getToken(1).image.equals("issingleton")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void Proceed() throws ParseException {
    if (getToken(1).image.equals("proceed")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void AND() throws ParseException {
    if (getToken(1).image.equals("AND")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  final public void OR() throws ParseException {
    if (getToken(1).image.equals("OR")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_3R_55() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_102()) return true;
    Token xsp;
    if (jj_3_2()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    return false;
  }

  private boolean jj_3R_40() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("withincode");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_67()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("within");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_66()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    return false;
  }

  private boolean jj_3R_61() {
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("target");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_70()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("staticinitialization");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("returning");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_72()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("preinitialization");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("initialization");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_59()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("handler");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_64()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("execution");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_58()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_125()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("cflowbelow");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_69()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(BANG)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("cflow");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_30() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("call");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_57()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_65() {
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("args");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_71()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("adviceexecution");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_65()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_50()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    return false;
  }

  private boolean jj_3R_36() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("set");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    return false;
  }

  private boolean jj_3R_35() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("get");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_62()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("OR");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_75()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(CLINIT)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).image.equals("AND");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_76()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public AJPointcutParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4128000,0x4128000,0x0,0x20000000,0x4128000,0x20000000,0x4128000,0x4128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4128000,0x0,0x4128000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8412a000,0x80002000,0x80002000,0x80002000,0x0,0x0,0x0,0x0,0x4128000,0x4128000,0x4128000,0x0,0x4128000,0x4128000,0x0,0x4128000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80502,0x80502,0x0,0x400000,0x80502,0x400000,0x80502,0x80080502,0x0,0x0,0x0,0x0,0x0,0x2000010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x80080502,0x0,0x80502,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x913b8d02,0x11338800,0x11338800,0x11338800,0x0,0x8000000,0x0,0x0,0x80080502,0x80080502,0x80502,0x0,0x80502,0x80502,0x0,0x80502,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x800,0x200000,0x0,0x10000800,0x0,0x0,0x800,0x400000,0x0,0x0,0x4000000,0x4000,0x0,0x800,0x200000,0x800,0x400000,0x800,0x800,0x804,0x0,0x4804,0x400000,0x4804,0x0,0x0,0x4000000,0x40000,0x4804,0x0,0x804,0x0,0x0,0x4000000,0x0,0x4804,0x4000000,0x0,0x4804,0x0,0x0,0x4004805,0x1,0x1,0x4000001,0x200000,0x0,0x4004804,0x200000,0x4404804,0x4404804,0x800,0x200000,0x800,0x800,0x0,0x800,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x100,0x100,0x100,0x40,0x100,0x20000040,0x100,0x8,0x4,0x0,0x0,0x100,0x40,0x100,0x4,0x8,0x0,0x40,0x100,0x0,0x40,0x100,0x4,0x8,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x20000100,0x20000100,0x20000100,0x0,0x20000100,0x20000100,0x40,0x100,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[27];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AJPointcutParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AJPointcutParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AJPointcutParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AJPointcutParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AJPointcutParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AJPointcutParser(AJPointcutParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AJPointcutParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
