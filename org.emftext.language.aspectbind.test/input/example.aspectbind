package kardidon;


public aspect Kardo{
 /*
	instance pointcut p1<int> : call(MyType.m()) && args(int,..,instance);
	pointcut p1() : call(...);
	after() : p1() {
		Object instance = find("int,..,instance", thisJoinPoint.getArgs());
		if(instance instanceof Object) {
		}
	} 

	instance pointcut p1<Object> : call(...) && target(instance);
	pointcut p1() : call(...);
	after() : p1() {
		Object instance = thisJoinPoint.getTarget();
		if(instance instanceof Object) {
		}
	} 
	
	instance pointcut p2<String> : p1<String>;
	pointcut p2(String instance) : p1(instance);

*/

	instance pointcut pc2<Object> : before(call(java.lang.Object+->new(..)) && returning(instance)) UNTIL after(call(public void java.lang.Object->notify(..)) && target(instance));
//	instance pointcut pc3<String> : pc2<String> && within(SomeClass) UNTIL pc2<String> & ...
	

	
	

}
